
Node_Sensor_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b1c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003c28  08003c28  00013c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c50  08003c50  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003c50  08003c50  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c50  08003c50  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c50  08003c50  00013c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c54  08003c54  00013c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000010  08003c68  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08003c68  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b725  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d73  00000000  00000000  0002b75e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  0002d4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc8  00000000  00000000  0002e158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017df6  00000000  00000000  0002ed20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce4a  00000000  00000000  00046b16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ad85  00000000  00000000  00053960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000de6e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035d8  00000000  00000000  000de738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08003c10 	.word	0x08003c10

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08003c10 	.word	0x08003c10

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2f>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000904:	bf24      	itt	cs
 8000906:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800090a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800090e:	d90d      	bls.n	800092c <__aeabi_d2f+0x30>
 8000910:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000914:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000918:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800091c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000920:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000924:	bf08      	it	eq
 8000926:	f020 0001 	biceq.w	r0, r0, #1
 800092a:	4770      	bx	lr
 800092c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000930:	d121      	bne.n	8000976 <__aeabi_d2f+0x7a>
 8000932:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000936:	bfbc      	itt	lt
 8000938:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800093c:	4770      	bxlt	lr
 800093e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000942:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000946:	f1c2 0218 	rsb	r2, r2, #24
 800094a:	f1c2 0c20 	rsb	ip, r2, #32
 800094e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000952:	fa20 f002 	lsr.w	r0, r0, r2
 8000956:	bf18      	it	ne
 8000958:	f040 0001 	orrne.w	r0, r0, #1
 800095c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000960:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000964:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000968:	ea40 000c 	orr.w	r0, r0, ip
 800096c:	fa23 f302 	lsr.w	r3, r3, r2
 8000970:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000974:	e7cc      	b.n	8000910 <__aeabi_d2f+0x14>
 8000976:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800097a:	d107      	bne.n	800098c <__aeabi_d2f+0x90>
 800097c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000980:	bf1e      	ittt	ne
 8000982:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000986:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800098a:	4770      	bxne	lr
 800098c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000990:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000994:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_frsub>:
 800099c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009a0:	e002      	b.n	80009a8 <__addsf3>
 80009a2:	bf00      	nop

080009a4 <__aeabi_fsub>:
 80009a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009a8 <__addsf3>:
 80009a8:	0042      	lsls	r2, r0, #1
 80009aa:	bf1f      	itttt	ne
 80009ac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009b0:	ea92 0f03 	teqne	r2, r3
 80009b4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009b8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009bc:	d06a      	beq.n	8000a94 <__addsf3+0xec>
 80009be:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009c2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009c6:	bfc1      	itttt	gt
 80009c8:	18d2      	addgt	r2, r2, r3
 80009ca:	4041      	eorgt	r1, r0
 80009cc:	4048      	eorgt	r0, r1
 80009ce:	4041      	eorgt	r1, r0
 80009d0:	bfb8      	it	lt
 80009d2:	425b      	neglt	r3, r3
 80009d4:	2b19      	cmp	r3, #25
 80009d6:	bf88      	it	hi
 80009d8:	4770      	bxhi	lr
 80009da:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4240      	negne	r0, r0
 80009ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009f2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009f6:	bf18      	it	ne
 80009f8:	4249      	negne	r1, r1
 80009fa:	ea92 0f03 	teq	r2, r3
 80009fe:	d03f      	beq.n	8000a80 <__addsf3+0xd8>
 8000a00:	f1a2 0201 	sub.w	r2, r2, #1
 8000a04:	fa41 fc03 	asr.w	ip, r1, r3
 8000a08:	eb10 000c 	adds.w	r0, r0, ip
 8000a0c:	f1c3 0320 	rsb	r3, r3, #32
 8000a10:	fa01 f103 	lsl.w	r1, r1, r3
 8000a14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a18:	d502      	bpl.n	8000a20 <__addsf3+0x78>
 8000a1a:	4249      	negs	r1, r1
 8000a1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a24:	d313      	bcc.n	8000a4e <__addsf3+0xa6>
 8000a26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a2a:	d306      	bcc.n	8000a3a <__addsf3+0x92>
 8000a2c:	0840      	lsrs	r0, r0, #1
 8000a2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a32:	f102 0201 	add.w	r2, r2, #1
 8000a36:	2afe      	cmp	r2, #254	; 0xfe
 8000a38:	d251      	bcs.n	8000ade <__addsf3+0x136>
 8000a3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a42:	bf08      	it	eq
 8000a44:	f020 0001 	biceq.w	r0, r0, #1
 8000a48:	ea40 0003 	orr.w	r0, r0, r3
 8000a4c:	4770      	bx	lr
 8000a4e:	0049      	lsls	r1, r1, #1
 8000a50:	eb40 0000 	adc.w	r0, r0, r0
 8000a54:	3a01      	subs	r2, #1
 8000a56:	bf28      	it	cs
 8000a58:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a5c:	d2ed      	bcs.n	8000a3a <__addsf3+0x92>
 8000a5e:	fab0 fc80 	clz	ip, r0
 8000a62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a66:	ebb2 020c 	subs.w	r2, r2, ip
 8000a6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a6e:	bfaa      	itet	ge
 8000a70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a74:	4252      	neglt	r2, r2
 8000a76:	4318      	orrge	r0, r3
 8000a78:	bfbc      	itt	lt
 8000a7a:	40d0      	lsrlt	r0, r2
 8000a7c:	4318      	orrlt	r0, r3
 8000a7e:	4770      	bx	lr
 8000a80:	f092 0f00 	teq	r2, #0
 8000a84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a88:	bf06      	itte	eq
 8000a8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a8e:	3201      	addeq	r2, #1
 8000a90:	3b01      	subne	r3, #1
 8000a92:	e7b5      	b.n	8000a00 <__addsf3+0x58>
 8000a94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a9c:	bf18      	it	ne
 8000a9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa2:	d021      	beq.n	8000ae8 <__addsf3+0x140>
 8000aa4:	ea92 0f03 	teq	r2, r3
 8000aa8:	d004      	beq.n	8000ab4 <__addsf3+0x10c>
 8000aaa:	f092 0f00 	teq	r2, #0
 8000aae:	bf08      	it	eq
 8000ab0:	4608      	moveq	r0, r1
 8000ab2:	4770      	bx	lr
 8000ab4:	ea90 0f01 	teq	r0, r1
 8000ab8:	bf1c      	itt	ne
 8000aba:	2000      	movne	r0, #0
 8000abc:	4770      	bxne	lr
 8000abe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ac2:	d104      	bne.n	8000ace <__addsf3+0x126>
 8000ac4:	0040      	lsls	r0, r0, #1
 8000ac6:	bf28      	it	cs
 8000ac8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	4770      	bx	lr
 8000ace:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ad2:	bf3c      	itt	cc
 8000ad4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bxcc	lr
 8000ada:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ade:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ae2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae6:	4770      	bx	lr
 8000ae8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000aec:	bf16      	itet	ne
 8000aee:	4608      	movne	r0, r1
 8000af0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000af4:	4601      	movne	r1, r0
 8000af6:	0242      	lsls	r2, r0, #9
 8000af8:	bf06      	itte	eq
 8000afa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000afe:	ea90 0f01 	teqeq	r0, r1
 8000b02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_ui2f>:
 8000b08:	f04f 0300 	mov.w	r3, #0
 8000b0c:	e004      	b.n	8000b18 <__aeabi_i2f+0x8>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_i2f>:
 8000b10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b14:	bf48      	it	mi
 8000b16:	4240      	negmi	r0, r0
 8000b18:	ea5f 0c00 	movs.w	ip, r0
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b24:	4601      	mov	r1, r0
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	e01c      	b.n	8000b66 <__aeabi_l2f+0x2a>

08000b2c <__aeabi_ul2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f04f 0300 	mov.w	r3, #0
 8000b38:	e00a      	b.n	8000b50 <__aeabi_l2f+0x14>
 8000b3a:	bf00      	nop

08000b3c <__aeabi_l2f>:
 8000b3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b40:	bf08      	it	eq
 8000b42:	4770      	bxeq	lr
 8000b44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b48:	d502      	bpl.n	8000b50 <__aeabi_l2f+0x14>
 8000b4a:	4240      	negs	r0, r0
 8000b4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b50:	ea5f 0c01 	movs.w	ip, r1
 8000b54:	bf02      	ittt	eq
 8000b56:	4684      	moveq	ip, r0
 8000b58:	4601      	moveq	r1, r0
 8000b5a:	2000      	moveq	r0, #0
 8000b5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b60:	bf08      	it	eq
 8000b62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b6a:	fabc f28c 	clz	r2, ip
 8000b6e:	3a08      	subs	r2, #8
 8000b70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b74:	db10      	blt.n	8000b98 <__aeabi_l2f+0x5c>
 8000b76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b7a:	4463      	add	r3, ip
 8000b7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b80:	f1c2 0220 	rsb	r2, r2, #32
 8000b84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b88:	fa20 f202 	lsr.w	r2, r0, r2
 8000b8c:	eb43 0002 	adc.w	r0, r3, r2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f102 0220 	add.w	r2, r2, #32
 8000b9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ba0:	f1c2 0220 	rsb	r2, r2, #32
 8000ba4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ba8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bac:	eb43 0002 	adc.w	r0, r3, r2
 8000bb0:	bf08      	it	eq
 8000bb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_fmul>:
 8000bb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bc0:	bf1e      	ittt	ne
 8000bc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bc6:	ea92 0f0c 	teqne	r2, ip
 8000bca:	ea93 0f0c 	teqne	r3, ip
 8000bce:	d06f      	beq.n	8000cb0 <__aeabi_fmul+0xf8>
 8000bd0:	441a      	add	r2, r3
 8000bd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bd6:	0240      	lsls	r0, r0, #9
 8000bd8:	bf18      	it	ne
 8000bda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bde:	d01e      	beq.n	8000c1e <__aeabi_fmul+0x66>
 8000be0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000be4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000be8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bec:	fba0 3101 	umull	r3, r1, r0, r1
 8000bf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bf4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000bf8:	bf3e      	ittt	cc
 8000bfa:	0049      	lslcc	r1, r1, #1
 8000bfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c00:	005b      	lslcc	r3, r3, #1
 8000c02:	ea40 0001 	orr.w	r0, r0, r1
 8000c06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c0a:	2afd      	cmp	r2, #253	; 0xfd
 8000c0c:	d81d      	bhi.n	8000c4a <__aeabi_fmul+0x92>
 8000c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c16:	bf08      	it	eq
 8000c18:	f020 0001 	biceq.w	r0, r0, #1
 8000c1c:	4770      	bx	lr
 8000c1e:	f090 0f00 	teq	r0, #0
 8000c22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c26:	bf08      	it	eq
 8000c28:	0249      	lsleq	r1, r1, #9
 8000c2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c32:	3a7f      	subs	r2, #127	; 0x7f
 8000c34:	bfc2      	ittt	gt
 8000c36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c3e:	4770      	bxgt	lr
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	dc5d      	bgt.n	8000d08 <__aeabi_fmul+0x150>
 8000c4c:	f112 0f19 	cmn.w	r2, #25
 8000c50:	bfdc      	itt	le
 8000c52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c56:	4770      	bxle	lr
 8000c58:	f1c2 0200 	rsb	r2, r2, #0
 8000c5c:	0041      	lsls	r1, r0, #1
 8000c5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c62:	f1c2 0220 	rsb	r2, r2, #32
 8000c66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c6e:	f140 0000 	adc.w	r0, r0, #0
 8000c72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c76:	bf08      	it	eq
 8000c78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c7c:	4770      	bx	lr
 8000c7e:	f092 0f00 	teq	r2, #0
 8000c82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c86:	bf02      	ittt	eq
 8000c88:	0040      	lsleq	r0, r0, #1
 8000c8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c8e:	3a01      	subeq	r2, #1
 8000c90:	d0f9      	beq.n	8000c86 <__aeabi_fmul+0xce>
 8000c92:	ea40 000c 	orr.w	r0, r0, ip
 8000c96:	f093 0f00 	teq	r3, #0
 8000c9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c9e:	bf02      	ittt	eq
 8000ca0:	0049      	lsleq	r1, r1, #1
 8000ca2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ca6:	3b01      	subeq	r3, #1
 8000ca8:	d0f9      	beq.n	8000c9e <__aeabi_fmul+0xe6>
 8000caa:	ea41 010c 	orr.w	r1, r1, ip
 8000cae:	e78f      	b.n	8000bd0 <__aeabi_fmul+0x18>
 8000cb0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cb4:	ea92 0f0c 	teq	r2, ip
 8000cb8:	bf18      	it	ne
 8000cba:	ea93 0f0c 	teqne	r3, ip
 8000cbe:	d00a      	beq.n	8000cd6 <__aeabi_fmul+0x11e>
 8000cc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cc4:	bf18      	it	ne
 8000cc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cca:	d1d8      	bne.n	8000c7e <__aeabi_fmul+0xc6>
 8000ccc:	ea80 0001 	eor.w	r0, r0, r1
 8000cd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cd4:	4770      	bx	lr
 8000cd6:	f090 0f00 	teq	r0, #0
 8000cda:	bf17      	itett	ne
 8000cdc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ce0:	4608      	moveq	r0, r1
 8000ce2:	f091 0f00 	teqne	r1, #0
 8000ce6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cea:	d014      	beq.n	8000d16 <__aeabi_fmul+0x15e>
 8000cec:	ea92 0f0c 	teq	r2, ip
 8000cf0:	d101      	bne.n	8000cf6 <__aeabi_fmul+0x13e>
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	d10f      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000cf6:	ea93 0f0c 	teq	r3, ip
 8000cfa:	d103      	bne.n	8000d04 <__aeabi_fmul+0x14c>
 8000cfc:	024b      	lsls	r3, r1, #9
 8000cfe:	bf18      	it	ne
 8000d00:	4608      	movne	r0, r1
 8000d02:	d108      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000d04:	ea80 0001 	eor.w	r0, r0, r1
 8000d08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d14:	4770      	bx	lr
 8000d16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d1e:	4770      	bx	lr

08000d20 <__aeabi_fdiv>:
 8000d20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d28:	bf1e      	ittt	ne
 8000d2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d2e:	ea92 0f0c 	teqne	r2, ip
 8000d32:	ea93 0f0c 	teqne	r3, ip
 8000d36:	d069      	beq.n	8000e0c <__aeabi_fdiv+0xec>
 8000d38:	eba2 0203 	sub.w	r2, r2, r3
 8000d3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d40:	0249      	lsls	r1, r1, #9
 8000d42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d46:	d037      	beq.n	8000db8 <__aeabi_fdiv+0x98>
 8000d48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	bf38      	it	cc
 8000d5c:	005b      	lslcc	r3, r3, #1
 8000d5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d66:	428b      	cmp	r3, r1
 8000d68:	bf24      	itt	cs
 8000d6a:	1a5b      	subcs	r3, r3, r1
 8000d6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d74:	bf24      	itt	cs
 8000d76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d82:	bf24      	itt	cs
 8000d84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d90:	bf24      	itt	cs
 8000d92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d9a:	011b      	lsls	r3, r3, #4
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000da2:	d1e0      	bne.n	8000d66 <__aeabi_fdiv+0x46>
 8000da4:	2afd      	cmp	r2, #253	; 0xfd
 8000da6:	f63f af50 	bhi.w	8000c4a <__aeabi_fmul+0x92>
 8000daa:	428b      	cmp	r3, r1
 8000dac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db0:	bf08      	it	eq
 8000db2:	f020 0001 	biceq.w	r0, r0, #1
 8000db6:	4770      	bx	lr
 8000db8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dbc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dc0:	327f      	adds	r2, #127	; 0x7f
 8000dc2:	bfc2      	ittt	gt
 8000dc4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dcc:	4770      	bxgt	lr
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd2:	f04f 0300 	mov.w	r3, #0
 8000dd6:	3a01      	subs	r2, #1
 8000dd8:	e737      	b.n	8000c4a <__aeabi_fmul+0x92>
 8000dda:	f092 0f00 	teq	r2, #0
 8000dde:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000de2:	bf02      	ittt	eq
 8000de4:	0040      	lsleq	r0, r0, #1
 8000de6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dea:	3a01      	subeq	r2, #1
 8000dec:	d0f9      	beq.n	8000de2 <__aeabi_fdiv+0xc2>
 8000dee:	ea40 000c 	orr.w	r0, r0, ip
 8000df2:	f093 0f00 	teq	r3, #0
 8000df6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dfa:	bf02      	ittt	eq
 8000dfc:	0049      	lsleq	r1, r1, #1
 8000dfe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e02:	3b01      	subeq	r3, #1
 8000e04:	d0f9      	beq.n	8000dfa <__aeabi_fdiv+0xda>
 8000e06:	ea41 010c 	orr.w	r1, r1, ip
 8000e0a:	e795      	b.n	8000d38 <__aeabi_fdiv+0x18>
 8000e0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e10:	ea92 0f0c 	teq	r2, ip
 8000e14:	d108      	bne.n	8000e28 <__aeabi_fdiv+0x108>
 8000e16:	0242      	lsls	r2, r0, #9
 8000e18:	f47f af7d 	bne.w	8000d16 <__aeabi_fmul+0x15e>
 8000e1c:	ea93 0f0c 	teq	r3, ip
 8000e20:	f47f af70 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e776      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e28:	ea93 0f0c 	teq	r3, ip
 8000e2c:	d104      	bne.n	8000e38 <__aeabi_fdiv+0x118>
 8000e2e:	024b      	lsls	r3, r1, #9
 8000e30:	f43f af4c 	beq.w	8000ccc <__aeabi_fmul+0x114>
 8000e34:	4608      	mov	r0, r1
 8000e36:	e76e      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e3c:	bf18      	it	ne
 8000e3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e42:	d1ca      	bne.n	8000dda <__aeabi_fdiv+0xba>
 8000e44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e48:	f47f af5c 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e50:	f47f af3c 	bne.w	8000ccc <__aeabi_fmul+0x114>
 8000e54:	e75f      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e56:	bf00      	nop

08000e58 <__aeabi_f2iz>:
 8000e58:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e5c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e60:	d30f      	bcc.n	8000e82 <__aeabi_f2iz+0x2a>
 8000e62:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e66:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e6a:	d90d      	bls.n	8000e88 <__aeabi_f2iz+0x30>
 8000e6c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e74:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e78:	fa23 f002 	lsr.w	r0, r3, r2
 8000e7c:	bf18      	it	ne
 8000e7e:	4240      	negne	r0, r0
 8000e80:	4770      	bx	lr
 8000e82:	f04f 0000 	mov.w	r0, #0
 8000e86:	4770      	bx	lr
 8000e88:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e8c:	d101      	bne.n	8000e92 <__aeabi_f2iz+0x3a>
 8000e8e:	0242      	lsls	r2, r0, #9
 8000e90:	d105      	bne.n	8000e9e <__aeabi_f2iz+0x46>
 8000e92:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000e96:	bf08      	it	eq
 8000e98:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e9c:	4770      	bx	lr
 8000e9e:	f04f 0000 	mov.w	r0, #0
 8000ea2:	4770      	bx	lr

08000ea4 <DS18B20_DelayInit>:
#include "DS18B20.h"
//************************** Low Level Layer ********************************************************//
#include "delay_timer.h"

static void DS18B20_DelayInit(DS18B20_Name* DS18B20)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	DELAY_TIM_Init(DS18B20->Timer);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f000 f995 	bl	80011e0 <DELAY_TIM_Init>
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <DS18B20_DelayUs>:
static void DS18B20_DelayUs(DS18B20_Name* DS18B20, uint16_t Time)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	807b      	strh	r3, [r7, #2]
	DELAY_TIM_Us(DS18B20->Timer, Time);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	887a      	ldrh	r2, [r7, #2]
 8000ed0:	4611      	mov	r1, r2
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 f98f 	bl	80011f6 <DELAY_TIM_Us>
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <DS18B20_DelayMs>:
static void DS18B20_DelayMs(DS18B20_Name* DS18B20, uint16_t Time)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	807b      	strh	r3, [r7, #2]
	DELAY_TIM_Ms(DS18B20->Timer, Time);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	887a      	ldrh	r2, [r7, #2]
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f000 f995 	bl	8001224 <DELAY_TIM_Ms>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <DS18B20_SetPinOut>:

static void DS18B20_SetPinOut(DS18B20_Name* DS18B20)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b086      	sub	sp, #24
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0a:	f107 0308 	add.w	r3, r7, #8
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = DS18B20->Pin;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	889b      	ldrh	r3, [r3, #4]
 8000f1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	2302      	movs	r3, #2
 8000f24:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DS18B20->PORT, &GPIO_InitStruct);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	f107 0208 	add.w	r2, r7, #8
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f001 f86f 	bl	8002014 <HAL_GPIO_Init>
}
 8000f36:	bf00      	nop
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <DS18B20_SetPinIn>:
static void DS18B20_SetPinIn(DS18B20_Name* DS18B20)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b086      	sub	sp, #24
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f46:	f107 0308 	add.w	r3, r7, #8
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = DS18B20->Pin;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	889b      	ldrh	r3, [r3, #4]
 8000f58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DS18B20->PORT, &GPIO_InitStruct);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	f107 0208 	add.w	r2, r7, #8
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f001 f851 	bl	8002014 <HAL_GPIO_Init>
}
 8000f72:	bf00      	nop
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <DS18B20_WritePin>:
static void DS18B20_WritePin(DS18B20_Name* DS18B20, uint8_t Value)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
 8000f82:	460b      	mov	r3, r1
 8000f84:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(DS18B20->PORT, DS18B20->Pin, Value);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6898      	ldr	r0, [r3, #8]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	889b      	ldrh	r3, [r3, #4]
 8000f8e:	78fa      	ldrb	r2, [r7, #3]
 8000f90:	4619      	mov	r1, r3
 8000f92:	f001 f9da 	bl	800234a <HAL_GPIO_WritePin>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <DS18B20_ReadPin>:
static uint8_t DS18B20_ReadPin(DS18B20_Name* DS18B20)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
	return  HAL_GPIO_ReadPin(DS18B20->PORT, DS18B20->Pin);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689a      	ldr	r2, [r3, #8]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	889b      	ldrh	r3, [r3, #4]
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4610      	mov	r0, r2
 8000fb2:	f001 f9b3 	bl	800231c <HAL_GPIO_ReadPin>
 8000fb6:	4603      	mov	r3, r0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <DS18B20_Start>:
//********************************* Middle level Layer ****************************************************//
static uint8_t DS18B20_Start(DS18B20_Name* DS18B20)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	uint8_t Response = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	73fb      	strb	r3, [r7, #15]
	DS18B20_SetPinOut(DS18B20);  
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff ff98 	bl	8000f02 <DS18B20_SetPinOut>
	DS18B20_WritePin(DS18B20, 0);
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff ffd0 	bl	8000f7a <DS18B20_WritePin>
	DS18B20_DelayUs(DS18B20, 480);   
 8000fda:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff ff6d 	bl	8000ebe <DS18B20_DelayUs>
	DS18B20_SetPinIn(DS18B20);    
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff ffaa 	bl	8000f3e <DS18B20_SetPinIn>
	DS18B20_DelayUs(DS18B20, 80); 
 8000fea:	2150      	movs	r1, #80	; 0x50
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff ff66 	bl	8000ebe <DS18B20_DelayUs>
	if (!(DS18B20_ReadPin(DS18B20))) Response = 1;   
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff ffd3 	bl	8000f9e <DS18B20_ReadPin>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d102      	bne.n	8001004 <DS18B20_Start+0x44>
 8000ffe:	2301      	movs	r3, #1
 8001000:	73fb      	strb	r3, [r7, #15]
 8001002:	e001      	b.n	8001008 <DS18B20_Start+0x48>
	else Response = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	73fb      	strb	r3, [r7, #15]
	DS18B20_DelayUs(DS18B20, 400); // 480 us delay totally.
 8001008:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff ff56 	bl	8000ebe <DS18B20_DelayUs>

	return Response;
 8001012:	7bfb      	ldrb	r3, [r7, #15]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <DS18B20_Write>:
static void DS18B20_Write(DS18B20_Name* DS18B20, uint8_t Data)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	460b      	mov	r3, r1
 8001026:	70fb      	strb	r3, [r7, #3]
	DS18B20_SetPinOut(DS18B20);
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff ff6a 	bl	8000f02 <DS18B20_SetPinOut>
	for(int i = 0; i<8; i++)
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	e02b      	b.n	800108c <DS18B20_Write+0x70>
	{
		if((Data&(1<<i))!=0)
 8001034:	78fa      	ldrb	r2, [r7, #3]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	fa42 f303 	asr.w	r3, r2, r3
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	2b00      	cmp	r3, #0
 8001042:	d012      	beq.n	800106a <DS18B20_Write+0x4e>
		{
			DS18B20_SetPinOut(DS18B20);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff ff5c 	bl	8000f02 <DS18B20_SetPinOut>
			DS18B20_WritePin(DS18B20, 0);
 800104a:	2100      	movs	r1, #0
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff ff94 	bl	8000f7a <DS18B20_WritePin>
			DS18B20_DelayUs(DS18B20, 1);
 8001052:	2101      	movs	r1, #1
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff ff32 	bl	8000ebe <DS18B20_DelayUs>
			DS18B20_SetPinIn(DS18B20);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff ff6f 	bl	8000f3e <DS18B20_SetPinIn>
			DS18B20_DelayUs(DS18B20, 50);
 8001060:	2132      	movs	r1, #50	; 0x32
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ff2b 	bl	8000ebe <DS18B20_DelayUs>
 8001068:	e00d      	b.n	8001086 <DS18B20_Write+0x6a>
		}
		else
		{
			DS18B20_SetPinOut(DS18B20);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff ff49 	bl	8000f02 <DS18B20_SetPinOut>
			DS18B20_WritePin(DS18B20, 0);
 8001070:	2100      	movs	r1, #0
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff ff81 	bl	8000f7a <DS18B20_WritePin>
			DS18B20_DelayUs(DS18B20, 50);
 8001078:	2132      	movs	r1, #50	; 0x32
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ff1f 	bl	8000ebe <DS18B20_DelayUs>
			DS18B20_SetPinIn(DS18B20);
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff ff5c 	bl	8000f3e <DS18B20_SetPinIn>
	for(int i = 0; i<8; i++)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	3301      	adds	r3, #1
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	2b07      	cmp	r3, #7
 8001090:	ddd0      	ble.n	8001034 <DS18B20_Write+0x18>
		}
	}
}
 8001092:	bf00      	nop
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <DS18B20_Read>:
static uint8_t DS18B20_Read(DS18B20_Name* DS18B20)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	uint8_t Value = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	73fb      	strb	r3, [r7, #15]
	DS18B20_SetPinIn(DS18B20);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ff48 	bl	8000f3e <DS18B20_SetPinIn>
	for(int i = 0; i<8; i++)
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	e024      	b.n	80010fe <DS18B20_Read+0x62>
	{
		DS18B20_SetPinOut(DS18B20);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ff24 	bl	8000f02 <DS18B20_SetPinOut>
		DS18B20_WritePin(DS18B20, 0);
 80010ba:	2100      	movs	r1, #0
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ff5c 	bl	8000f7a <DS18B20_WritePin>
		DS18B20_DelayUs(DS18B20, 1);
 80010c2:	2101      	movs	r1, #1
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff fefa 	bl	8000ebe <DS18B20_DelayUs>
		DS18B20_SetPinIn(DS18B20);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff ff37 	bl	8000f3e <DS18B20_SetPinIn>
		if(DS18B20_ReadPin(DS18B20))
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ff64 	bl	8000f9e <DS18B20_ReadPin>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d009      	beq.n	80010f0 <DS18B20_Read+0x54>
		{
			Value |= 1<<i;
 80010dc:	2201      	movs	r2, #1
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	b25a      	sxtb	r2, r3
 80010e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	b25b      	sxtb	r3, r3
 80010ee:	73fb      	strb	r3, [r7, #15]
		}
		DS18B20_DelayUs(DS18B20, 50);
 80010f0:	2132      	movs	r1, #50	; 0x32
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff fee3 	bl	8000ebe <DS18B20_DelayUs>
	for(int i = 0; i<8; i++)
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	3301      	adds	r3, #1
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	2b07      	cmp	r3, #7
 8001102:	ddd7      	ble.n	80010b4 <DS18B20_Read+0x18>
	}
	return Value;
 8001104:	7bfb      	ldrb	r3, [r7, #15]
}
 8001106:	4618      	mov	r0, r3
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <DS18B20_Init>:

//************************** High Level Layer ********************************************************//
void DS18B20_Init(DS18B20_Name* DS18B20, TIM_HandleTypeDef* Timer, GPIO_TypeDef* DS_PORT, uint16_t DS_Pin)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b084      	sub	sp, #16
 8001112:	af00      	add	r7, sp, #0
 8001114:	60f8      	str	r0, [r7, #12]
 8001116:	60b9      	str	r1, [r7, #8]
 8001118:	607a      	str	r2, [r7, #4]
 800111a:	807b      	strh	r3, [r7, #2]
	DS18B20->PORT = DS_PORT;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	609a      	str	r2, [r3, #8]
	DS18B20->Pin = DS_Pin;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	887a      	ldrh	r2, [r7, #2]
 8001126:	809a      	strh	r2, [r3, #4]
	DS18B20->Timer = Timer;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	601a      	str	r2, [r3, #0]
	DS18B20_DelayInit(DS18B20);
 800112e:	68f8      	ldr	r0, [r7, #12]
 8001130:	f7ff feb8 	bl	8000ea4 <DS18B20_DelayInit>
}
 8001134:	bf00      	nop
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <DS18B20_ReadTemp>:

float DS18B20_ReadTemp(DS18B20_Name* DS18B20)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	uint8_t Temp1, Temp2;
	uint16_t Temp;
	DS18B20_Start(DS18B20);
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff ff3b 	bl	8000fc0 <DS18B20_Start>
	DS18B20_DelayMs(DS18B20, 1);
 800114a:	2101      	movs	r1, #1
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff fec7 	bl	8000ee0 <DS18B20_DelayMs>
	DS18B20_Write(DS18B20, DS18B20_SKIPROM);
 8001152:	21cc      	movs	r1, #204	; 0xcc
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ff61 	bl	800101c <DS18B20_Write>
	DS18B20_Write(DS18B20, DS18B20_CONVERT);
 800115a:	2144      	movs	r1, #68	; 0x44
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ff5d 	bl	800101c <DS18B20_Write>
	DS18B20_DelayMs(DS18B20, 200);
 8001162:	21c8      	movs	r1, #200	; 0xc8
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff febb 	bl	8000ee0 <DS18B20_DelayMs>
	DS18B20_Start(DS18B20);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff ff28 	bl	8000fc0 <DS18B20_Start>
	DS18B20_DelayMs(DS18B20, 1);
 8001170:	2101      	movs	r1, #1
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff feb4 	bl	8000ee0 <DS18B20_DelayMs>
	DS18B20_Write(DS18B20, DS18B20_SKIPROM);
 8001178:	21cc      	movs	r1, #204	; 0xcc
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff ff4e 	bl	800101c <DS18B20_Write>
	DS18B20_Write(DS18B20, DS18B20_READSCRAT);
 8001180:	21be      	movs	r1, #190	; 0xbe
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff ff4a 	bl	800101c <DS18B20_Write>
	Temp1 = DS18B20_Read(DS18B20);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff ff87 	bl	800109c <DS18B20_Read>
 800118e:	4603      	mov	r3, r0
 8001190:	73fb      	strb	r3, [r7, #15]
	Temp2 = DS18B20_Read(DS18B20);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff ff82 	bl	800109c <DS18B20_Read>
 8001198:	4603      	mov	r3, r0
 800119a:	73bb      	strb	r3, [r7, #14]
	Temp = (Temp2<<8)|Temp1;
 800119c:	7bbb      	ldrb	r3, [r7, #14]
 800119e:	021b      	lsls	r3, r3, #8
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	b21b      	sxth	r3, r3
 80011a6:	4313      	orrs	r3, r2
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	81bb      	strh	r3, [r7, #12]
	DS18B20->Temp = (float)(Temp/16.0);
 80011ac:	89bb      	ldrh	r3, [r7, #12]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff f928 	bl	8000404 <__aeabi_i2d>
 80011b4:	f04f 0200 	mov.w	r2, #0
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <DS18B20_ReadTemp+0xa0>)
 80011ba:	f7ff fab7 	bl	800072c <__aeabi_ddiv>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4610      	mov	r0, r2
 80011c4:	4619      	mov	r1, r3
 80011c6:	f7ff fb99 	bl	80008fc <__aeabi_d2f>
 80011ca:	4602      	mov	r2, r0
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	60da      	str	r2, [r3, #12]
	return DS18B20->Temp;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	68db      	ldr	r3, [r3, #12]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40300000 	.word	0x40300000

080011e0 <DELAY_TIM_Init>:
- Su dung thu vien hal

*****************************************************************************************************/
#include "delay_timer.h"
void DELAY_TIM_Init(TIM_HandleTypeDef *htim)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(htim);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f001 fd49 	bl	8002c80 <HAL_TIM_Base_Start>
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <DELAY_TIM_Us>:

void DELAY_TIM_Us(TIM_HandleTypeDef *htim, uint16_t time)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	460b      	mov	r3, r1
 8001200:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(htim,0);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2200      	movs	r2, #0
 8001208:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(htim)<time){}
 800120a:	bf00      	nop
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001212:	887b      	ldrh	r3, [r7, #2]
 8001214:	429a      	cmp	r2, r3
 8001216:	d3f9      	bcc.n	800120c <DELAY_TIM_Us+0x16>
}
 8001218:	bf00      	nop
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr

08001224 <DELAY_TIM_Ms>:
void DELAY_TIM_Ms(TIM_HandleTypeDef *htim, uint16_t Time)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(htim,0);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2200      	movs	r2, #0
 8001236:	625a      	str	r2, [r3, #36]	; 0x24
	while(Time--)
 8001238:	e006      	b.n	8001248 <DELAY_TIM_Ms+0x24>
	{
		while(__HAL_TIM_GET_COUNTER(htim)<1000){}
 800123a:	bf00      	nop
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001242:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001246:	d3f9      	bcc.n	800123c <DELAY_TIM_Ms+0x18>
	while(Time--)
 8001248:	887b      	ldrh	r3, [r7, #2]
 800124a:	1e5a      	subs	r2, r3, #1
 800124c:	807a      	strh	r2, [r7, #2]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1f3      	bne.n	800123a <DELAY_TIM_Ms+0x16>
	}
}
 8001252:	bf00      	nop
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
	...

08001260 <change_mode>:

// Function that changing mode of module Lora 
Trang_thai change_mode(GPIO_TypeDef *GPIOx_AUX, uint16_t GPIO_Pin_AUX,
					   GPIO_TypeDef *GPIOx_M0, uint16_t GPIO_Pin_M0,
					   GPIO_TypeDef *GPIOx_M1, uint16_t GPIO_Pin_M1, mode_lora mode)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	607a      	str	r2, [r7, #4]
 800126a:	461a      	mov	r2, r3
 800126c:	460b      	mov	r3, r1
 800126e:	817b      	strh	r3, [r7, #10]
 8001270:	4613      	mov	r3, r2
 8001272:	813b      	strh	r3, [r7, #8]
	GPIO_PinState read_pin_AUX = HAL_GPIO_ReadPin(GPIOx_AUX,GPIO_Pin_AUX);
 8001274:	897b      	ldrh	r3, [r7, #10]
 8001276:	4619      	mov	r1, r3
 8001278:	68f8      	ldr	r0, [r7, #12]
 800127a:	f001 f84f 	bl	800231c <HAL_GPIO_ReadPin>
 800127e:	4603      	mov	r3, r0
 8001280:	75fb      	strb	r3, [r7, #23]
	while(read_pin_AUX==GPIO_PIN_RESET){
 8001282:	7dfb      	ldrb	r3, [r7, #23]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0fc      	beq.n	8001282 <change_mode+0x22>

	};
	HAL_Delay(5);
 8001288:	2005      	movs	r0, #5
 800128a:	f000 fce1 	bl	8001c50 <HAL_Delay>
	if(read_pin_AUX==GPIO_PIN_SET){
 800128e:	7dfb      	ldrb	r3, [r7, #23]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d15f      	bne.n	8001354 <change_mode+0xf4>
		switch(mode)
 8001294:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001298:	2b03      	cmp	r3, #3
 800129a:	d84b      	bhi.n	8001334 <change_mode+0xd4>
 800129c:	a201      	add	r2, pc, #4	; (adr r2, 80012a4 <change_mode+0x44>)
 800129e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a2:	bf00      	nop
 80012a4:	080012b5 	.word	0x080012b5
 80012a8:	080012d5 	.word	0x080012d5
 80012ac:	080012f5 	.word	0x080012f5
 80012b0:	08001315 	.word	0x08001315
			{
			case General_Mode:
				HAL_GPIO_WritePin(GPIOx_M0,GPIO_Pin_M0 , GPIO_PIN_RESET);
 80012b4:	893b      	ldrh	r3, [r7, #8]
 80012b6:	2200      	movs	r2, #0
 80012b8:	4619      	mov	r1, r3
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f001 f845 	bl	800234a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOx_M1, GPIO_Pin_M1, GPIO_PIN_RESET);
 80012c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012c2:	2200      	movs	r2, #0
 80012c4:	4619      	mov	r1, r3
 80012c6:	6a38      	ldr	r0, [r7, #32]
 80012c8:	f001 f83f 	bl	800234a <HAL_GPIO_WritePin>
			HAL_Delay(10);
 80012cc:	200a      	movs	r0, #10
 80012ce:	f000 fcbf 	bl	8001c50 <HAL_Delay>
			break;
 80012d2:	e040      	b.n	8001356 <change_mode+0xf6>
			case Power_Saving_Mode:
				HAL_GPIO_WritePin(GPIOx_M0, GPIO_Pin_M0, GPIO_PIN_SET);
 80012d4:	893b      	ldrh	r3, [r7, #8]
 80012d6:	2201      	movs	r2, #1
 80012d8:	4619      	mov	r1, r3
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f001 f835 	bl	800234a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOx_M1,GPIO_Pin_M1 , GPIO_PIN_RESET);
 80012e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012e2:	2200      	movs	r2, #0
 80012e4:	4619      	mov	r1, r3
 80012e6:	6a38      	ldr	r0, [r7, #32]
 80012e8:	f001 f82f 	bl	800234a <HAL_GPIO_WritePin>
			HAL_Delay(10);
 80012ec:	200a      	movs	r0, #10
 80012ee:	f000 fcaf 	bl	8001c50 <HAL_Delay>
			break;
 80012f2:	e030      	b.n	8001356 <change_mode+0xf6>
			case Wake_up_Mode:
				HAL_GPIO_WritePin(GPIOx_M0, GPIO_Pin_M0, GPIO_PIN_RESET);
 80012f4:	893b      	ldrh	r3, [r7, #8]
 80012f6:	2200      	movs	r2, #0
 80012f8:	4619      	mov	r1, r3
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f001 f825 	bl	800234a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOx_M1,GPIO_Pin_M1 , GPIO_PIN_SET);
 8001300:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001302:	2201      	movs	r2, #1
 8001304:	4619      	mov	r1, r3
 8001306:	6a38      	ldr	r0, [r7, #32]
 8001308:	f001 f81f 	bl	800234a <HAL_GPIO_WritePin>
			HAL_Delay(10);
 800130c:	200a      	movs	r0, #10
 800130e:	f000 fc9f 	bl	8001c50 <HAL_Delay>
			break;
 8001312:	e020      	b.n	8001356 <change_mode+0xf6>
			case Sleep_Mode:
				HAL_GPIO_WritePin(GPIOx_M0,GPIO_Pin_M0 , GPIO_PIN_SET);
 8001314:	893b      	ldrh	r3, [r7, #8]
 8001316:	2201      	movs	r2, #1
 8001318:	4619      	mov	r1, r3
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f001 f815 	bl	800234a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOx_M1, GPIO_Pin_M1, GPIO_PIN_SET);
 8001320:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001322:	2201      	movs	r2, #1
 8001324:	4619      	mov	r1, r3
 8001326:	6a38      	ldr	r0, [r7, #32]
 8001328:	f001 f80f 	bl	800234a <HAL_GPIO_WritePin>
			HAL_Delay(10);
 800132c:	200a      	movs	r0, #10
 800132e:	f000 fc8f 	bl	8001c50 <HAL_Delay>
			break;
 8001332:	e010      	b.n	8001356 <change_mode+0xf6>
			default:
				HAL_GPIO_WritePin(GPIOx_M0,GPIO_Pin_M0 , GPIO_PIN_RESET);
 8001334:	893b      	ldrh	r3, [r7, #8]
 8001336:	2200      	movs	r2, #0
 8001338:	4619      	mov	r1, r3
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f001 f805 	bl	800234a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOx_M1,GPIO_Pin_M1 , GPIO_PIN_RESET);
 8001340:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001342:	2200      	movs	r2, #0
 8001344:	4619      	mov	r1, r3
 8001346:	6a38      	ldr	r0, [r7, #32]
 8001348:	f000 ffff 	bl	800234a <HAL_GPIO_WritePin>
			HAL_Delay(10);
 800134c:	200a      	movs	r0, #10
 800134e:	f000 fc7f 	bl	8001c50 <HAL_Delay>
				break;
 8001352:	e000      	b.n	8001356 <change_mode+0xf6>
		}
	};
 8001354:	bf00      	nop

	while(read_pin_AUX == GPIO_PIN_RESET)
 8001356:	7dfb      	ldrb	r3, [r7, #23]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d0fc      	beq.n	8001356 <change_mode+0xf6>
	{

	};
	HAL_Delay(5);
 800135c:	2005      	movs	r0, #5
 800135e:	f000 fc77 	bl	8001c50 <HAL_Delay>
if (read_pin_AUX	==GPIO_PIN_SET)
 8001362:	7dfb      	ldrb	r3, [r7, #23]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d101      	bne.n	800136c <change_mode+0x10c>
	{
		return SUCCEED;
 8001368:	2301      	movs	r3, #1
 800136a:	e000      	b.n	800136e <change_mode+0x10e>
	}
	else
	{
		return FAIL;
 800136c:	2300      	movs	r3, #0
	}

}
 800136e:	4618      	mov	r0, r3
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop

08001378 <config_lora>:
// function that confige parameter for module Lora
void config_lora(UART_HandleTypeDef *huart, int baudrate,
					 uint8_t add_high_byte, uint8_t add_low_byte, option_t option)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	4611      	mov	r1, r2
 8001384:	461a      	mov	r2, r3
 8001386:	460b      	mov	r3, r1
 8001388:	71fb      	strb	r3, [r7, #7]
 800138a:	4613      	mov	r3, r2
 800138c:	71bb      	strb	r3, [r7, #6]
	uint8_t SPEED;
	uint8_t OPTION;
	uint8_t ADDH = add_high_byte;
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	777b      	strb	r3, [r7, #29]
	uint8_t ADDL = add_low_byte;
 8001392:	79bb      	ldrb	r3, [r7, #6]
 8001394:	773b      	strb	r3, [r7, #28]


	/* 433MHz */
	uint8_t CHAN = 0x17;
 8001396:	2317      	movs	r3, #23
 8001398:	76fb      	strb	r3, [r7, #27]
	switch(baudrate)
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
 80013a0:	d049      	beq.n	8001436 <config_lora+0xbe>
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
 80013a8:	dc48      	bgt.n	800143c <config_lora+0xc4>
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
 80013b0:	d03e      	beq.n	8001430 <config_lora+0xb8>
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
 80013b8:	dc40      	bgt.n	800143c <config_lora+0xc4>
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
 80013c0:	d033      	beq.n	800142a <config_lora+0xb2>
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
 80013c8:	dc38      	bgt.n	800143c <config_lora+0xc4>
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 80013d0:	d028      	beq.n	8001424 <config_lora+0xac>
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 80013d8:	dc30      	bgt.n	800143c <config_lora+0xc4>
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 80013e0:	d01d      	beq.n	800141e <config_lora+0xa6>
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 80013e8:	dc28      	bgt.n	800143c <config_lora+0xc4>
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
 80013f0:	d012      	beq.n	8001418 <config_lora+0xa0>
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
 80013f8:	dc20      	bgt.n	800143c <config_lora+0xc4>
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001400:	d004      	beq.n	800140c <config_lora+0x94>
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8001408:	d003      	beq.n	8001412 <config_lora+0x9a>
 800140a:	e017      	b.n	800143c <config_lora+0xc4>
	{
		case 1200:
			SPEED = 0x02;
 800140c:	2302      	movs	r3, #2
 800140e:	77fb      	strb	r3, [r7, #31]
			break;
 8001410:	e016      	b.n	8001440 <config_lora+0xc8>
		case 2400:
			SPEED = 0x0A;
 8001412:	230a      	movs	r3, #10
 8001414:	77fb      	strb	r3, [r7, #31]
			break;
 8001416:	e013      	b.n	8001440 <config_lora+0xc8>
		case 4800:
			SPEED = 0x12;
 8001418:	2312      	movs	r3, #18
 800141a:	77fb      	strb	r3, [r7, #31]
			break;
 800141c:	e010      	b.n	8001440 <config_lora+0xc8>
		case 9600:
			SPEED = 0x1A;
 800141e:	231a      	movs	r3, #26
 8001420:	77fb      	strb	r3, [r7, #31]
			break;
 8001422:	e00d      	b.n	8001440 <config_lora+0xc8>
		case 19200:
			SPEED = 0x22;
 8001424:	2322      	movs	r3, #34	; 0x22
 8001426:	77fb      	strb	r3, [r7, #31]
			break;
 8001428:	e00a      	b.n	8001440 <config_lora+0xc8>
		case 38400:
			SPEED = 0x2A;
 800142a:	232a      	movs	r3, #42	; 0x2a
 800142c:	77fb      	strb	r3, [r7, #31]
			break;
 800142e:	e007      	b.n	8001440 <config_lora+0xc8>
		case 57600:
			SPEED = 0x32;
 8001430:	2332      	movs	r3, #50	; 0x32
 8001432:	77fb      	strb	r3, [r7, #31]
			break;
 8001434:	e004      	b.n	8001440 <config_lora+0xc8>
		case 115200:
			SPEED = 0x3A;
 8001436:	233a      	movs	r3, #58	; 0x3a
 8001438:	77fb      	strb	r3, [r7, #31]
			break;
 800143a:	e001      	b.n	8001440 <config_lora+0xc8>
		default:
			SPEED = 0x1A;
 800143c:	231a      	movs	r3, #26
 800143e:	77fb      	strb	r3, [r7, #31]
	};

	switch(option)
 8001440:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001444:	2b00      	cmp	r3, #0
 8001446:	d002      	beq.n	800144e <config_lora+0xd6>
 8001448:	2b01      	cmp	r3, #1
 800144a:	d003      	beq.n	8001454 <config_lora+0xdc>
 800144c:	e005      	b.n	800145a <config_lora+0xe2>
	{
		case TRANSPARENT:
			OPTION = 0x40 ;
 800144e:	2340      	movs	r3, #64	; 0x40
 8001450:	77bb      	strb	r3, [r7, #30]
			break;
 8001452:	e005      	b.n	8001460 <config_lora+0xe8>
		case POINT2POINT:
			OPTION = 0xC0;
 8001454:	23c0      	movs	r3, #192	; 0xc0
 8001456:	77bb      	strb	r3, [r7, #30]
			break;
 8001458:	e002      	b.n	8001460 <config_lora+0xe8>
		default:
			OPTION = 0x40;
 800145a:	2340      	movs	r3, #64	; 0x40
 800145c:	77bb      	strb	r3, [r7, #30]
		break;
 800145e:	bf00      	nop
	};

	uint8_t config_cmd[] = {0xC0, ADDH, ADDL, SPEED, CHAN, OPTION};
 8001460:	23c0      	movs	r3, #192	; 0xc0
 8001462:	753b      	strb	r3, [r7, #20]
 8001464:	7f7b      	ldrb	r3, [r7, #29]
 8001466:	757b      	strb	r3, [r7, #21]
 8001468:	7f3b      	ldrb	r3, [r7, #28]
 800146a:	75bb      	strb	r3, [r7, #22]
 800146c:	7ffb      	ldrb	r3, [r7, #31]
 800146e:	75fb      	strb	r3, [r7, #23]
 8001470:	7efb      	ldrb	r3, [r7, #27]
 8001472:	763b      	strb	r3, [r7, #24]
 8001474:	7fbb      	ldrb	r3, [r7, #30]
 8001476:	767b      	strb	r3, [r7, #25]

	/* Configure */

	HAL_UART_Transmit(huart, config_cmd, sizeof(config_cmd), 100);
 8001478:	f107 0114 	add.w	r1, r7, #20
 800147c:	2364      	movs	r3, #100	; 0x64
 800147e:	2206      	movs	r2, #6
 8001480:	68f8      	ldr	r0, [r7, #12]
 8001482:	f001 feae 	bl	80031e2 <HAL_UART_Transmit>
	HAL_Delay(150);
 8001486:	2096      	movs	r0, #150	; 0x96
 8001488:	f000 fbe2 	bl	8001c50 <HAL_Delay>
}
 800148c:	bf00      	nop
 800148e:	3720      	adds	r7, #32
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_UART_RxCpltCallback>:

// ISR of UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b087      	sub	sp, #28
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  // Check received data
   if(strcmp(data, data1) == 0){
 800149c:	4957      	ldr	r1, [pc, #348]	; (80015fc <HAL_UART_RxCpltCallback+0x168>)
 800149e:	4858      	ldr	r0, [pc, #352]	; (8001600 <HAL_UART_RxCpltCallback+0x16c>)
 80014a0:	f7fe fe54 	bl	800014c <strcmp>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f040 80a1 	bne.w	80015ee <HAL_UART_RxCpltCallback+0x15a>
    // First request of Gateway
		 if(flag==0){
 80014ac:	4b55      	ldr	r3, [pc, #340]	; (8001604 <HAL_UART_RxCpltCallback+0x170>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d175      	bne.n	80015a0 <HAL_UART_RxCpltCallback+0x10c>
      // Read Sensor
				temp=DS18B20_ReadTemp(&DS1);
 80014b4:	4854      	ldr	r0, [pc, #336]	; (8001608 <HAL_UART_RxCpltCallback+0x174>)
 80014b6:	f7ff fe41 	bl	800113c <DS18B20_ReadTemp>
 80014ba:	4603      	mov	r3, r0
 80014bc:	4a53      	ldr	r2, [pc, #332]	; (800160c <HAL_UART_RxCpltCallback+0x178>)
 80014be:	6013      	str	r3, [r2, #0]
				temp_tenth=(int)((temp)/10);
 80014c0:	4b52      	ldr	r3, [pc, #328]	; (800160c <HAL_UART_RxCpltCallback+0x178>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4952      	ldr	r1, [pc, #328]	; (8001610 <HAL_UART_RxCpltCallback+0x17c>)
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fc2a 	bl	8000d20 <__aeabi_fdiv>
 80014cc:	4603      	mov	r3, r0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fcc2 	bl	8000e58 <__aeabi_f2iz>
 80014d4:	4603      	mov	r3, r0
 80014d6:	4a4f      	ldr	r2, [pc, #316]	; (8001614 <HAL_UART_RxCpltCallback+0x180>)
 80014d8:	6013      	str	r3, [r2, #0]
				temp_unit =(int)((int)temp%10);
 80014da:	4b4c      	ldr	r3, [pc, #304]	; (800160c <HAL_UART_RxCpltCallback+0x178>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff fcba 	bl	8000e58 <__aeabi_f2iz>
 80014e4:	4601      	mov	r1, r0
 80014e6:	4b4c      	ldr	r3, [pc, #304]	; (8001618 <HAL_UART_RxCpltCallback+0x184>)
 80014e8:	fb83 2301 	smull	r2, r3, r3, r1
 80014ec:	109a      	asrs	r2, r3, #2
 80014ee:	17cb      	asrs	r3, r1, #31
 80014f0:	1ad2      	subs	r2, r2, r3
 80014f2:	4613      	mov	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	1aca      	subs	r2, r1, r3
 80014fc:	4b47      	ldr	r3, [pc, #284]	; (800161c <HAL_UART_RxCpltCallback+0x188>)
 80014fe:	601a      	str	r2, [r3, #0]
				temp_decimal=(int)((temp-temp_tenth*10-temp_unit)*10);
 8001500:	4b42      	ldr	r3, [pc, #264]	; (800160c <HAL_UART_RxCpltCallback+0x178>)
 8001502:	681c      	ldr	r4, [r3, #0]
 8001504:	4b43      	ldr	r3, [pc, #268]	; (8001614 <HAL_UART_RxCpltCallback+0x180>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4613      	mov	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4413      	add	r3, r2
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fafd 	bl	8000b10 <__aeabi_i2f>
 8001516:	4603      	mov	r3, r0
 8001518:	4619      	mov	r1, r3
 800151a:	4620      	mov	r0, r4
 800151c:	f7ff fa42 	bl	80009a4 <__aeabi_fsub>
 8001520:	4603      	mov	r3, r0
 8001522:	461c      	mov	r4, r3
 8001524:	4b3d      	ldr	r3, [pc, #244]	; (800161c <HAL_UART_RxCpltCallback+0x188>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff faf1 	bl	8000b10 <__aeabi_i2f>
 800152e:	4603      	mov	r3, r0
 8001530:	4619      	mov	r1, r3
 8001532:	4620      	mov	r0, r4
 8001534:	f7ff fa36 	bl	80009a4 <__aeabi_fsub>
 8001538:	4603      	mov	r3, r0
 800153a:	4935      	ldr	r1, [pc, #212]	; (8001610 <HAL_UART_RxCpltCallback+0x17c>)
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fb3b 	bl	8000bb8 <__aeabi_fmul>
 8001542:	4603      	mov	r3, r0
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fc87 	bl	8000e58 <__aeabi_f2iz>
 800154a:	4603      	mov	r3, r0
 800154c:	4a34      	ldr	r2, [pc, #208]	; (8001620 <HAL_UART_RxCpltCallback+0x18c>)
 800154e:	6013      	str	r3, [r2, #0]
				HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8001550:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001554:	4833      	ldr	r0, [pc, #204]	; (8001624 <HAL_UART_RxCpltCallback+0x190>)
 8001556:	f000 ff10 	bl	800237a <HAL_GPIO_TogglePin>
      // Create message
				uint8_t TX_Buffer[]={0x00, 0x20, 0x17, temp_tenth+48, temp_unit+48, temp_decimal+48};
 800155a:	2300      	movs	r3, #0
 800155c:	743b      	strb	r3, [r7, #16]
 800155e:	2320      	movs	r3, #32
 8001560:	747b      	strb	r3, [r7, #17]
 8001562:	2317      	movs	r3, #23
 8001564:	74bb      	strb	r3, [r7, #18]
 8001566:	4b2b      	ldr	r3, [pc, #172]	; (8001614 <HAL_UART_RxCpltCallback+0x180>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	3330      	adds	r3, #48	; 0x30
 800156e:	b2db      	uxtb	r3, r3
 8001570:	74fb      	strb	r3, [r7, #19]
 8001572:	4b2a      	ldr	r3, [pc, #168]	; (800161c <HAL_UART_RxCpltCallback+0x188>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	b2db      	uxtb	r3, r3
 8001578:	3330      	adds	r3, #48	; 0x30
 800157a:	b2db      	uxtb	r3, r3
 800157c:	753b      	strb	r3, [r7, #20]
 800157e:	4b28      	ldr	r3, [pc, #160]	; (8001620 <HAL_UART_RxCpltCallback+0x18c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	b2db      	uxtb	r3, r3
 8001584:	3330      	adds	r3, #48	; 0x30
 8001586:	b2db      	uxtb	r3, r3
 8001588:	757b      	strb	r3, [r7, #21]
      // Transmit to module Lora
				HAL_UART_Transmit(huart, TX_Buffer, sizeof(TX_Buffer),100);
 800158a:	f107 0110 	add.w	r1, r7, #16
 800158e:	2364      	movs	r3, #100	; 0x64
 8001590:	2206      	movs	r2, #6
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f001 fe25 	bl	80031e2 <HAL_UART_Transmit>
				flag=1;
 8001598:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <HAL_UART_RxCpltCallback+0x170>)
 800159a:	2201      	movs	r2, #1
 800159c:	701a      	strb	r2, [r3, #0]
		}
	 }
	 else{
		 flag=0;
	 }
}
 800159e:	e029      	b.n	80015f4 <HAL_UART_RxCpltCallback+0x160>
	   else if(flag==1){
 80015a0:	4b18      	ldr	r3, [pc, #96]	; (8001604 <HAL_UART_RxCpltCallback+0x170>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d125      	bne.n	80015f4 <HAL_UART_RxCpltCallback+0x160>
				uint8_t TX_Buffer[]={ 0x00, 0x20, 0x17, temp_tenth+48, temp_unit+48, temp_decimal+48};
 80015a8:	2300      	movs	r3, #0
 80015aa:	723b      	strb	r3, [r7, #8]
 80015ac:	2320      	movs	r3, #32
 80015ae:	727b      	strb	r3, [r7, #9]
 80015b0:	2317      	movs	r3, #23
 80015b2:	72bb      	strb	r3, [r7, #10]
 80015b4:	4b17      	ldr	r3, [pc, #92]	; (8001614 <HAL_UART_RxCpltCallback+0x180>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	3330      	adds	r3, #48	; 0x30
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	72fb      	strb	r3, [r7, #11]
 80015c0:	4b16      	ldr	r3, [pc, #88]	; (800161c <HAL_UART_RxCpltCallback+0x188>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	3330      	adds	r3, #48	; 0x30
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	733b      	strb	r3, [r7, #12]
 80015cc:	4b14      	ldr	r3, [pc, #80]	; (8001620 <HAL_UART_RxCpltCallback+0x18c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	3330      	adds	r3, #48	; 0x30
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	737b      	strb	r3, [r7, #13]
				HAL_UART_Transmit(huart, TX_Buffer, sizeof(TX_Buffer),100);
 80015d8:	f107 0108 	add.w	r1, r7, #8
 80015dc:	2364      	movs	r3, #100	; 0x64
 80015de:	2206      	movs	r2, #6
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f001 fdfe 	bl	80031e2 <HAL_UART_Transmit>
				flag=0;
 80015e6:	4b07      	ldr	r3, [pc, #28]	; (8001604 <HAL_UART_RxCpltCallback+0x170>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	701a      	strb	r2, [r3, #0]
}
 80015ec:	e002      	b.n	80015f4 <HAL_UART_RxCpltCallback+0x160>
		 flag=0;
 80015ee:	4b05      	ldr	r3, [pc, #20]	; (8001604 <HAL_UART_RxCpltCallback+0x170>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
}
 80015f4:	bf00      	nop
 80015f6:	371c      	adds	r7, #28
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd90      	pop	{r4, r7, pc}
 80015fc:	20000000 	.word	0x20000000
 8001600:	200000d8 	.word	0x200000d8
 8001604:	200000dc 	.word	0x200000dc
 8001608:	200000bc 	.word	0x200000bc
 800160c:	200000b8 	.word	0x200000b8
 8001610:	41200000 	.word	0x41200000
 8001614:	200000cc 	.word	0x200000cc
 8001618:	66666667 	.word	0x66666667
 800161c:	200000d0 	.word	0x200000d0
 8001620:	200000d4 	.word	0x200000d4
 8001624:	40011000 	.word	0x40011000

08001628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800162e:	f000 faad 	bl	8001b8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001632:	f000 f855 	bl	80016e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001636:	f000 f911 	bl	800185c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800163a:	f000 f8e5 	bl	8001808 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 800163e:	f000 f895 	bl	800176c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	Trang_thai state;
  // Change to Sleep mode to configure
	state = change_mode(GPIOA, GPIO_PIN_3, GPIOA,GPIO_PIN_1, GPIOA, GPIO_PIN_2, Sleep_Mode);
 8001642:	2303      	movs	r3, #3
 8001644:	9302      	str	r3, [sp, #8]
 8001646:	2304      	movs	r3, #4
 8001648:	9301      	str	r3, [sp, #4]
 800164a:	4b1f      	ldr	r3, [pc, #124]	; (80016c8 <main+0xa0>)
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	2302      	movs	r3, #2
 8001650:	4a1d      	ldr	r2, [pc, #116]	; (80016c8 <main+0xa0>)
 8001652:	2108      	movs	r1, #8
 8001654:	481c      	ldr	r0, [pc, #112]	; (80016c8 <main+0xa0>)
 8001656:	f7ff fe03 	bl	8001260 <change_mode>
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
	if(state==FAIL){
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d10d      	bne.n	8001680 <main+0x58>
		state = change_mode(GPIOA, GPIO_PIN_3, GPIOA,GPIO_PIN_1, GPIOA, GPIO_PIN_2, Sleep_Mode);
 8001664:	2303      	movs	r3, #3
 8001666:	9302      	str	r3, [sp, #8]
 8001668:	2304      	movs	r3, #4
 800166a:	9301      	str	r3, [sp, #4]
 800166c:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <main+0xa0>)
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	2302      	movs	r3, #2
 8001672:	4a15      	ldr	r2, [pc, #84]	; (80016c8 <main+0xa0>)
 8001674:	2108      	movs	r1, #8
 8001676:	4814      	ldr	r0, [pc, #80]	; (80016c8 <main+0xa0>)
 8001678:	f7ff fdf2 	bl	8001260 <change_mode>
 800167c:	4603      	mov	r3, r0
 800167e:	71fb      	strb	r3, [r7, #7]
	}
  // Configure address and channel
	config_lora(&huart1,9600,0x00, 0x01, POINT2POINT);
 8001680:	2301      	movs	r3, #1
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	2301      	movs	r3, #1
 8001686:	2200      	movs	r2, #0
 8001688:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 800168c:	480f      	ldr	r0, [pc, #60]	; (80016cc <main+0xa4>)
 800168e:	f7ff fe73 	bl	8001378 <config_lora>
  // Change to General mode
	state = change_mode(GPIOA, GPIO_PIN_3, GPIOA,GPIO_PIN_1, GPIOA, GPIO_PIN_2, General_Mode);
 8001692:	2300      	movs	r3, #0
 8001694:	9302      	str	r3, [sp, #8]
 8001696:	2304      	movs	r3, #4
 8001698:	9301      	str	r3, [sp, #4]
 800169a:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <main+0xa0>)
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	2302      	movs	r3, #2
 80016a0:	4a09      	ldr	r2, [pc, #36]	; (80016c8 <main+0xa0>)
 80016a2:	2108      	movs	r1, #8
 80016a4:	4808      	ldr	r0, [pc, #32]	; (80016c8 <main+0xa0>)
 80016a6:	f7ff fddb 	bl	8001260 <change_mode>
 80016aa:	4603      	mov	r3, r0
 80016ac:	71fb      	strb	r3, [r7, #7]
  // Initilize sensor
	DS18B20_Init(&DS1, &htim4, DS18B20_GPIO_Port, DS18B20_Pin);
 80016ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016b2:	4a07      	ldr	r2, [pc, #28]	; (80016d0 <main+0xa8>)
 80016b4:	4907      	ldr	r1, [pc, #28]	; (80016d4 <main+0xac>)
 80016b6:	4808      	ldr	r0, [pc, #32]	; (80016d8 <main+0xb0>)
 80016b8:	f7ff fd29 	bl	800110e <DS18B20_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // Enable UART interrupt
	  HAL_UART_Receive_IT(&huart1, data, 3);
 80016bc:	2203      	movs	r2, #3
 80016be:	4907      	ldr	r1, [pc, #28]	; (80016dc <main+0xb4>)
 80016c0:	4802      	ldr	r0, [pc, #8]	; (80016cc <main+0xa4>)
 80016c2:	f001 fe20 	bl	8003306 <HAL_UART_Receive_IT>
 80016c6:	e7f9      	b.n	80016bc <main+0x94>
 80016c8:	40010800 	.word	0x40010800
 80016cc:	20000074 	.word	0x20000074
 80016d0:	40010c00 	.word	0x40010c00
 80016d4:	2000002c 	.word	0x2000002c
 80016d8:	200000bc 	.word	0x200000bc
 80016dc:	200000d8 	.word	0x200000d8

080016e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b090      	sub	sp, #64	; 0x40
 80016e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016e6:	f107 0318 	add.w	r3, r7, #24
 80016ea:	2228      	movs	r2, #40	; 0x28
 80016ec:	2100      	movs	r1, #0
 80016ee:	4618      	mov	r0, r3
 80016f0:	f002 fa86 	bl	8003c00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]
 8001700:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001702:	2301      	movs	r3, #1
 8001704:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001706:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800170a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800170c:	2300      	movs	r3, #0
 800170e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001710:	2301      	movs	r3, #1
 8001712:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001714:	2302      	movs	r3, #2
 8001716:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001718:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800171c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800171e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001722:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001724:	f107 0318 	add.w	r3, r7, #24
 8001728:	4618      	mov	r0, r3
 800172a:	f000 fe3f 	bl	80023ac <HAL_RCC_OscConfig>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001734:	f000 f922 	bl	800197c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001738:	230f      	movs	r3, #15
 800173a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800173c:	2302      	movs	r3, #2
 800173e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001740:	2300      	movs	r3, #0
 8001742:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001744:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001748:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	2102      	movs	r1, #2
 8001752:	4618      	mov	r0, r3
 8001754:	f001 f8ac 	bl	80028b0 <HAL_RCC_ClockConfig>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800175e:	f000 f90d 	bl	800197c <Error_Handler>
  }
}
 8001762:	bf00      	nop
 8001764:	3740      	adds	r7, #64	; 0x40
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001772:	f107 0308 	add.w	r3, r7, #8
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001780:	463b      	mov	r3, r7
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001788:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <MX_TIM4_Init+0x94>)
 800178a:	4a1e      	ldr	r2, [pc, #120]	; (8001804 <MX_TIM4_Init+0x98>)
 800178c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 800178e:	4b1c      	ldr	r3, [pc, #112]	; (8001800 <MX_TIM4_Init+0x94>)
 8001790:	2247      	movs	r2, #71	; 0x47
 8001792:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001794:	4b1a      	ldr	r3, [pc, #104]	; (8001800 <MX_TIM4_Init+0x94>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800179a:	4b19      	ldr	r3, [pc, #100]	; (8001800 <MX_TIM4_Init+0x94>)
 800179c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017a0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a2:	4b17      	ldr	r3, [pc, #92]	; (8001800 <MX_TIM4_Init+0x94>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a8:	4b15      	ldr	r3, [pc, #84]	; (8001800 <MX_TIM4_Init+0x94>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80017ae:	4814      	ldr	r0, [pc, #80]	; (8001800 <MX_TIM4_Init+0x94>)
 80017b0:	f001 fa16 	bl	8002be0 <HAL_TIM_Base_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80017ba:	f000 f8df 	bl	800197c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80017c4:	f107 0308 	add.w	r3, r7, #8
 80017c8:	4619      	mov	r1, r3
 80017ca:	480d      	ldr	r0, [pc, #52]	; (8001800 <MX_TIM4_Init+0x94>)
 80017cc:	f001 faa2 	bl	8002d14 <HAL_TIM_ConfigClockSource>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80017d6:	f000 f8d1 	bl	800197c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017da:	2300      	movs	r3, #0
 80017dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017de:	2300      	movs	r3, #0
 80017e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017e2:	463b      	mov	r3, r7
 80017e4:	4619      	mov	r1, r3
 80017e6:	4806      	ldr	r0, [pc, #24]	; (8001800 <MX_TIM4_Init+0x94>)
 80017e8:	f001 fc50 	bl	800308c <HAL_TIMEx_MasterConfigSynchronization>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80017f2:	f000 f8c3 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80017f6:	bf00      	nop
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	2000002c 	.word	0x2000002c
 8001804:	40000800 	.word	0x40000800

08001808 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800180c:	4b11      	ldr	r3, [pc, #68]	; (8001854 <MX_USART1_UART_Init+0x4c>)
 800180e:	4a12      	ldr	r2, [pc, #72]	; (8001858 <MX_USART1_UART_Init+0x50>)
 8001810:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001812:	4b10      	ldr	r3, [pc, #64]	; (8001854 <MX_USART1_UART_Init+0x4c>)
 8001814:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001818:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800181a:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <MX_USART1_UART_Init+0x4c>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001820:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <MX_USART1_UART_Init+0x4c>)
 8001822:	2200      	movs	r2, #0
 8001824:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001826:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <MX_USART1_UART_Init+0x4c>)
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800182c:	4b09      	ldr	r3, [pc, #36]	; (8001854 <MX_USART1_UART_Init+0x4c>)
 800182e:	220c      	movs	r2, #12
 8001830:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001832:	4b08      	ldr	r3, [pc, #32]	; (8001854 <MX_USART1_UART_Init+0x4c>)
 8001834:	2200      	movs	r2, #0
 8001836:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <MX_USART1_UART_Init+0x4c>)
 800183a:	2200      	movs	r2, #0
 800183c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800183e:	4805      	ldr	r0, [pc, #20]	; (8001854 <MX_USART1_UART_Init+0x4c>)
 8001840:	f001 fc82 	bl	8003148 <HAL_UART_Init>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800184a:	f000 f897 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000074 	.word	0x20000074
 8001858:	40013800 	.word	0x40013800

0800185c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b088      	sub	sp, #32
 8001860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001862:	f107 0310 	add.w	r3, r7, #16
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]
 800186c:	609a      	str	r2, [r3, #8]
 800186e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001870:	4b3e      	ldr	r3, [pc, #248]	; (800196c <MX_GPIO_Init+0x110>)
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	4a3d      	ldr	r2, [pc, #244]	; (800196c <MX_GPIO_Init+0x110>)
 8001876:	f043 0310 	orr.w	r3, r3, #16
 800187a:	6193      	str	r3, [r2, #24]
 800187c:	4b3b      	ldr	r3, [pc, #236]	; (800196c <MX_GPIO_Init+0x110>)
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	f003 0310 	and.w	r3, r3, #16
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001888:	4b38      	ldr	r3, [pc, #224]	; (800196c <MX_GPIO_Init+0x110>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	4a37      	ldr	r2, [pc, #220]	; (800196c <MX_GPIO_Init+0x110>)
 800188e:	f043 0320 	orr.w	r3, r3, #32
 8001892:	6193      	str	r3, [r2, #24]
 8001894:	4b35      	ldr	r3, [pc, #212]	; (800196c <MX_GPIO_Init+0x110>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	f003 0320 	and.w	r3, r3, #32
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a0:	4b32      	ldr	r3, [pc, #200]	; (800196c <MX_GPIO_Init+0x110>)
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	4a31      	ldr	r2, [pc, #196]	; (800196c <MX_GPIO_Init+0x110>)
 80018a6:	f043 0304 	orr.w	r3, r3, #4
 80018aa:	6193      	str	r3, [r2, #24]
 80018ac:	4b2f      	ldr	r3, [pc, #188]	; (800196c <MX_GPIO_Init+0x110>)
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	607b      	str	r3, [r7, #4]
 80018b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b8:	4b2c      	ldr	r3, [pc, #176]	; (800196c <MX_GPIO_Init+0x110>)
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	4a2b      	ldr	r2, [pc, #172]	; (800196c <MX_GPIO_Init+0x110>)
 80018be:	f043 0308 	orr.w	r3, r3, #8
 80018c2:	6193      	str	r3, [r2, #24]
 80018c4:	4b29      	ldr	r3, [pc, #164]	; (800196c <MX_GPIO_Init+0x110>)
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	f003 0308 	and.w	r3, r3, #8
 80018cc:	603b      	str	r3, [r7, #0]
 80018ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80018d0:	2200      	movs	r2, #0
 80018d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018d6:	4826      	ldr	r0, [pc, #152]	; (8001970 <MX_GPIO_Init+0x114>)
 80018d8:	f000 fd37 	bl	800234a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M0_Lora_Pin|M1_Lora_Pin, GPIO_PIN_RESET);
 80018dc:	2200      	movs	r2, #0
 80018de:	2106      	movs	r1, #6
 80018e0:	4824      	ldr	r0, [pc, #144]	; (8001974 <MX_GPIO_Init+0x118>)
 80018e2:	f000 fd32 	bl	800234a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18B20_GPIO_Port, DS18B20_Pin, GPIO_PIN_RESET);
 80018e6:	2200      	movs	r2, #0
 80018e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018ec:	4822      	ldr	r0, [pc, #136]	; (8001978 <MX_GPIO_Init+0x11c>)
 80018ee:	f000 fd2c 	bl	800234a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80018f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f8:	2301      	movs	r3, #1
 80018fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001900:	2302      	movs	r3, #2
 8001902:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001904:	f107 0310 	add.w	r3, r7, #16
 8001908:	4619      	mov	r1, r3
 800190a:	4819      	ldr	r0, [pc, #100]	; (8001970 <MX_GPIO_Init+0x114>)
 800190c:	f000 fb82 	bl	8002014 <HAL_GPIO_Init>

  /*Configure GPIO pins : M0_Lora_Pin M1_Lora_Pin */
  GPIO_InitStruct.Pin = M0_Lora_Pin|M1_Lora_Pin;
 8001910:	2306      	movs	r3, #6
 8001912:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001914:	2301      	movs	r3, #1
 8001916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191c:	2302      	movs	r3, #2
 800191e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001920:	f107 0310 	add.w	r3, r7, #16
 8001924:	4619      	mov	r1, r3
 8001926:	4813      	ldr	r0, [pc, #76]	; (8001974 <MX_GPIO_Init+0x118>)
 8001928:	f000 fb74 	bl	8002014 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUX_Lora_Pin */
  GPIO_InitStruct.Pin = AUX_Lora_Pin;
 800192c:	2308      	movs	r3, #8
 800192e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AUX_Lora_GPIO_Port, &GPIO_InitStruct);
 8001938:	f107 0310 	add.w	r3, r7, #16
 800193c:	4619      	mov	r1, r3
 800193e:	480d      	ldr	r0, [pc, #52]	; (8001974 <MX_GPIO_Init+0x118>)
 8001940:	f000 fb68 	bl	8002014 <HAL_GPIO_Init>

  /*Configure GPIO pin : DS18B20_Pin */
  GPIO_InitStruct.Pin = DS18B20_Pin;
 8001944:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001948:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194a:	2301      	movs	r3, #1
 800194c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001952:	2302      	movs	r3, #2
 8001954:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DS18B20_GPIO_Port, &GPIO_InitStruct);
 8001956:	f107 0310 	add.w	r3, r7, #16
 800195a:	4619      	mov	r1, r3
 800195c:	4806      	ldr	r0, [pc, #24]	; (8001978 <MX_GPIO_Init+0x11c>)
 800195e:	f000 fb59 	bl	8002014 <HAL_GPIO_Init>

}
 8001962:	bf00      	nop
 8001964:	3720      	adds	r7, #32
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40021000 	.word	0x40021000
 8001970:	40011000 	.word	0x40011000
 8001974:	40010800 	.word	0x40010800
 8001978:	40010c00 	.word	0x40010c00

0800197c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800198e:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <HAL_MspInit+0x5c>)
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	4a14      	ldr	r2, [pc, #80]	; (80019e4 <HAL_MspInit+0x5c>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6193      	str	r3, [r2, #24]
 800199a:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <HAL_MspInit+0x5c>)
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a6:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <HAL_MspInit+0x5c>)
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	4a0e      	ldr	r2, [pc, #56]	; (80019e4 <HAL_MspInit+0x5c>)
 80019ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b0:	61d3      	str	r3, [r2, #28]
 80019b2:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <HAL_MspInit+0x5c>)
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ba:	607b      	str	r3, [r7, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <HAL_MspInit+0x60>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <HAL_MspInit+0x60>)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019da:	bf00      	nop
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40010000 	.word	0x40010000

080019ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a09      	ldr	r2, [pc, #36]	; (8001a20 <HAL_TIM_Base_MspInit+0x34>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d10b      	bne.n	8001a16 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <HAL_TIM_Base_MspInit+0x38>)
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	4a08      	ldr	r2, [pc, #32]	; (8001a24 <HAL_TIM_Base_MspInit+0x38>)
 8001a04:	f043 0304 	orr.w	r3, r3, #4
 8001a08:	61d3      	str	r3, [r2, #28]
 8001a0a:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_TIM_Base_MspInit+0x38>)
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a16:	bf00      	nop
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr
 8001a20:	40000800 	.word	0x40000800
 8001a24:	40021000 	.word	0x40021000

08001a28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b088      	sub	sp, #32
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a30:	f107 0310 	add.w	r3, r7, #16
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a20      	ldr	r2, [pc, #128]	; (8001ac4 <HAL_UART_MspInit+0x9c>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d139      	bne.n	8001abc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a48:	4b1f      	ldr	r3, [pc, #124]	; (8001ac8 <HAL_UART_MspInit+0xa0>)
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	4a1e      	ldr	r2, [pc, #120]	; (8001ac8 <HAL_UART_MspInit+0xa0>)
 8001a4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a52:	6193      	str	r3, [r2, #24]
 8001a54:	4b1c      	ldr	r3, [pc, #112]	; (8001ac8 <HAL_UART_MspInit+0xa0>)
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a60:	4b19      	ldr	r3, [pc, #100]	; (8001ac8 <HAL_UART_MspInit+0xa0>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	4a18      	ldr	r2, [pc, #96]	; (8001ac8 <HAL_UART_MspInit+0xa0>)
 8001a66:	f043 0304 	orr.w	r3, r3, #4
 8001a6a:	6193      	str	r3, [r2, #24]
 8001a6c:	4b16      	ldr	r3, [pc, #88]	; (8001ac8 <HAL_UART_MspInit+0xa0>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a82:	2303      	movs	r3, #3
 8001a84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a86:	f107 0310 	add.w	r3, r7, #16
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	480f      	ldr	r0, [pc, #60]	; (8001acc <HAL_UART_MspInit+0xa4>)
 8001a8e:	f000 fac1 	bl	8002014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa0:	f107 0310 	add.w	r3, r7, #16
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4809      	ldr	r0, [pc, #36]	; (8001acc <HAL_UART_MspInit+0xa4>)
 8001aa8:	f000 fab4 	bl	8002014 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001aac:	2200      	movs	r2, #0
 8001aae:	2101      	movs	r1, #1
 8001ab0:	2025      	movs	r0, #37	; 0x25
 8001ab2:	f000 f9c8 	bl	8001e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ab6:	2025      	movs	r0, #37	; 0x25
 8001ab8:	f000 f9e1 	bl	8001e7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001abc:	bf00      	nop
 8001abe:	3720      	adds	r7, #32
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40013800 	.word	0x40013800
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40010800 	.word	0x40010800

08001ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ad4:	e7fe      	b.n	8001ad4 <NMI_Handler+0x4>

08001ad6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ada:	e7fe      	b.n	8001ada <HardFault_Handler+0x4>

08001adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ae0:	e7fe      	b.n	8001ae0 <MemManage_Handler+0x4>

08001ae2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ae6:	e7fe      	b.n	8001ae6 <BusFault_Handler+0x4>

08001ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aec:	e7fe      	b.n	8001aec <UsageFault_Handler+0x4>

08001aee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr

08001afa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bc80      	pop	{r7}
 8001b04:	4770      	bx	lr

08001b06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr

08001b12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b16:	f000 f87f 	bl	8001c18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b24:	4802      	ldr	r0, [pc, #8]	; (8001b30 <USART1_IRQHandler+0x10>)
 8001b26:	f001 fc1f 	bl	8003368 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000074 	.word	0x20000074

08001b34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr

08001b40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b40:	480c      	ldr	r0, [pc, #48]	; (8001b74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b42:	490d      	ldr	r1, [pc, #52]	; (8001b78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b44:	4a0d      	ldr	r2, [pc, #52]	; (8001b7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b48:	e002      	b.n	8001b50 <LoopCopyDataInit>

08001b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b4e:	3304      	adds	r3, #4

08001b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b54:	d3f9      	bcc.n	8001b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b56:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b58:	4c0a      	ldr	r4, [pc, #40]	; (8001b84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b5c:	e001      	b.n	8001b62 <LoopFillZerobss>

08001b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b60:	3204      	adds	r2, #4

08001b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b64:	d3fb      	bcc.n	8001b5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b66:	f7ff ffe5 	bl	8001b34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b6a:	f002 f825 	bl	8003bb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b6e:	f7ff fd5b 	bl	8001628 <main>
  bx lr
 8001b72:	4770      	bx	lr
  ldr r0, =_sdata
 8001b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b78:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001b7c:	08003c58 	.word	0x08003c58
  ldr r2, =_sbss
 8001b80:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001b84:	200000e4 	.word	0x200000e4

08001b88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b88:	e7fe      	b.n	8001b88 <ADC1_2_IRQHandler>
	...

08001b8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b90:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <HAL_Init+0x28>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a07      	ldr	r2, [pc, #28]	; (8001bb4 <HAL_Init+0x28>)
 8001b96:	f043 0310 	orr.w	r3, r3, #16
 8001b9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b9c:	2003      	movs	r0, #3
 8001b9e:	f000 f947 	bl	8001e30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	f000 f808 	bl	8001bb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ba8:	f7ff feee 	bl	8001988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40022000 	.word	0x40022000

08001bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bc0:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <HAL_InitTick+0x54>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <HAL_InitTick+0x58>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f000 f95f 	bl	8001e9a <HAL_SYSTICK_Config>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e00e      	b.n	8001c04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b0f      	cmp	r3, #15
 8001bea:	d80a      	bhi.n	8001c02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bec:	2200      	movs	r2, #0
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf4:	f000 f927 	bl	8001e46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bf8:	4a06      	ldr	r2, [pc, #24]	; (8001c14 <HAL_InitTick+0x5c>)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	e000      	b.n	8001c04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20000004 	.word	0x20000004
 8001c10:	2000000c 	.word	0x2000000c
 8001c14:	20000008 	.word	0x20000008

08001c18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c1c:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <HAL_IncTick+0x1c>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	461a      	mov	r2, r3
 8001c22:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <HAL_IncTick+0x20>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4413      	add	r3, r2
 8001c28:	4a03      	ldr	r2, [pc, #12]	; (8001c38 <HAL_IncTick+0x20>)
 8001c2a:	6013      	str	r3, [r2, #0]
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr
 8001c34:	2000000c 	.word	0x2000000c
 8001c38:	200000e0 	.word	0x200000e0

08001c3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c40:	4b02      	ldr	r3, [pc, #8]	; (8001c4c <HAL_GetTick+0x10>)
 8001c42:	681b      	ldr	r3, [r3, #0]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr
 8001c4c:	200000e0 	.word	0x200000e0

08001c50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c58:	f7ff fff0 	bl	8001c3c <HAL_GetTick>
 8001c5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c68:	d005      	beq.n	8001c76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <HAL_Delay+0x44>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4413      	add	r3, r2
 8001c74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c76:	bf00      	nop
 8001c78:	f7ff ffe0 	bl	8001c3c <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d8f7      	bhi.n	8001c78 <HAL_Delay+0x28>
  {
  }
}
 8001c88:	bf00      	nop
 8001c8a:	bf00      	nop
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	2000000c 	.word	0x2000000c

08001c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <__NVIC_SetPriorityGrouping+0x44>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cca:	4a04      	ldr	r2, [pc, #16]	; (8001cdc <__NVIC_SetPriorityGrouping+0x44>)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	60d3      	str	r3, [r2, #12]
}
 8001cd0:	bf00      	nop
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce4:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	0a1b      	lsrs	r3, r3, #8
 8001cea:	f003 0307 	and.w	r3, r3, #7
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	db0b      	blt.n	8001d26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	f003 021f 	and.w	r2, r3, #31
 8001d14:	4906      	ldr	r1, [pc, #24]	; (8001d30 <__NVIC_EnableIRQ+0x34>)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	095b      	lsrs	r3, r3, #5
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr
 8001d30:	e000e100 	.word	0xe000e100

08001d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	6039      	str	r1, [r7, #0]
 8001d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	db0a      	blt.n	8001d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	490c      	ldr	r1, [pc, #48]	; (8001d80 <__NVIC_SetPriority+0x4c>)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	0112      	lsls	r2, r2, #4
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	440b      	add	r3, r1
 8001d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d5c:	e00a      	b.n	8001d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	4908      	ldr	r1, [pc, #32]	; (8001d84 <__NVIC_SetPriority+0x50>)
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	3b04      	subs	r3, #4
 8001d6c:	0112      	lsls	r2, r2, #4
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	440b      	add	r3, r1
 8001d72:	761a      	strb	r2, [r3, #24]
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	e000e100 	.word	0xe000e100
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b089      	sub	sp, #36	; 0x24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f1c3 0307 	rsb	r3, r3, #7
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	bf28      	it	cs
 8001da6:	2304      	movcs	r3, #4
 8001da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	3304      	adds	r3, #4
 8001dae:	2b06      	cmp	r3, #6
 8001db0:	d902      	bls.n	8001db8 <NVIC_EncodePriority+0x30>
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3b03      	subs	r3, #3
 8001db6:	e000      	b.n	8001dba <NVIC_EncodePriority+0x32>
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43da      	mvns	r2, r3
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	401a      	ands	r2, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dda:	43d9      	mvns	r1, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de0:	4313      	orrs	r3, r2
         );
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3724      	adds	r7, #36	; 0x24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr

08001dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dfc:	d301      	bcc.n	8001e02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e00f      	b.n	8001e22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e02:	4a0a      	ldr	r2, [pc, #40]	; (8001e2c <SysTick_Config+0x40>)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e0a:	210f      	movs	r1, #15
 8001e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e10:	f7ff ff90 	bl	8001d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e14:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <SysTick_Config+0x40>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e1a:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <SysTick_Config+0x40>)
 8001e1c:	2207      	movs	r2, #7
 8001e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	e000e010 	.word	0xe000e010

08001e30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f7ff ff2d 	bl	8001c98 <__NVIC_SetPriorityGrouping>
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b086      	sub	sp, #24
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	60b9      	str	r1, [r7, #8]
 8001e50:	607a      	str	r2, [r7, #4]
 8001e52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e58:	f7ff ff42 	bl	8001ce0 <__NVIC_GetPriorityGrouping>
 8001e5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	68b9      	ldr	r1, [r7, #8]
 8001e62:	6978      	ldr	r0, [r7, #20]
 8001e64:	f7ff ff90 	bl	8001d88 <NVIC_EncodePriority>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e6e:	4611      	mov	r1, r2
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff ff5f 	bl	8001d34 <__NVIC_SetPriority>
}
 8001e76:	bf00      	nop
 8001e78:	3718      	adds	r7, #24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	4603      	mov	r3, r0
 8001e86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff ff35 	bl	8001cfc <__NVIC_EnableIRQ>
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7ff ffa2 	bl	8001dec <SysTick_Config>
 8001ea8:	4603      	mov	r3, r0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b085      	sub	sp, #20
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d008      	beq.n	8001eda <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2204      	movs	r2, #4
 8001ecc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e020      	b.n	8001f1c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 020e 	bic.w	r2, r2, #14
 8001ee8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0201 	bic.w	r2, r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f02:	2101      	movs	r1, #1
 8001f04:	fa01 f202 	lsl.w	r2, r1, r2
 8001f08:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr
	...

08001f28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f30:	2300      	movs	r3, #0
 8001f32:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d005      	beq.n	8001f4a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2204      	movs	r2, #4
 8001f42:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	73fb      	strb	r3, [r7, #15]
 8001f48:	e051      	b.n	8001fee <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 020e 	bic.w	r2, r2, #14
 8001f58:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 0201 	bic.w	r2, r2, #1
 8001f68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a22      	ldr	r2, [pc, #136]	; (8001ff8 <HAL_DMA_Abort_IT+0xd0>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d029      	beq.n	8001fc8 <HAL_DMA_Abort_IT+0xa0>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a20      	ldr	r2, [pc, #128]	; (8001ffc <HAL_DMA_Abort_IT+0xd4>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d022      	beq.n	8001fc4 <HAL_DMA_Abort_IT+0x9c>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a1f      	ldr	r2, [pc, #124]	; (8002000 <HAL_DMA_Abort_IT+0xd8>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d01a      	beq.n	8001fbe <HAL_DMA_Abort_IT+0x96>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a1d      	ldr	r2, [pc, #116]	; (8002004 <HAL_DMA_Abort_IT+0xdc>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d012      	beq.n	8001fb8 <HAL_DMA_Abort_IT+0x90>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a1c      	ldr	r2, [pc, #112]	; (8002008 <HAL_DMA_Abort_IT+0xe0>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d00a      	beq.n	8001fb2 <HAL_DMA_Abort_IT+0x8a>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a1a      	ldr	r2, [pc, #104]	; (800200c <HAL_DMA_Abort_IT+0xe4>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d102      	bne.n	8001fac <HAL_DMA_Abort_IT+0x84>
 8001fa6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001faa:	e00e      	b.n	8001fca <HAL_DMA_Abort_IT+0xa2>
 8001fac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fb0:	e00b      	b.n	8001fca <HAL_DMA_Abort_IT+0xa2>
 8001fb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fb6:	e008      	b.n	8001fca <HAL_DMA_Abort_IT+0xa2>
 8001fb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fbc:	e005      	b.n	8001fca <HAL_DMA_Abort_IT+0xa2>
 8001fbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fc2:	e002      	b.n	8001fca <HAL_DMA_Abort_IT+0xa2>
 8001fc4:	2310      	movs	r3, #16
 8001fc6:	e000      	b.n	8001fca <HAL_DMA_Abort_IT+0xa2>
 8001fc8:	2301      	movs	r3, #1
 8001fca:	4a11      	ldr	r2, [pc, #68]	; (8002010 <HAL_DMA_Abort_IT+0xe8>)
 8001fcc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	4798      	blx	r3
    } 
  }
  return status;
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40020008 	.word	0x40020008
 8001ffc:	4002001c 	.word	0x4002001c
 8002000:	40020030 	.word	0x40020030
 8002004:	40020044 	.word	0x40020044
 8002008:	40020058 	.word	0x40020058
 800200c:	4002006c 	.word	0x4002006c
 8002010:	40020000 	.word	0x40020000

08002014 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002014:	b480      	push	{r7}
 8002016:	b08b      	sub	sp, #44	; 0x2c
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800201e:	2300      	movs	r3, #0
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002022:	2300      	movs	r3, #0
 8002024:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002026:	e169      	b.n	80022fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002028:	2201      	movs	r2, #1
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	69fa      	ldr	r2, [r7, #28]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	429a      	cmp	r2, r3
 8002042:	f040 8158 	bne.w	80022f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	4a9a      	ldr	r2, [pc, #616]	; (80022b4 <HAL_GPIO_Init+0x2a0>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d05e      	beq.n	800210e <HAL_GPIO_Init+0xfa>
 8002050:	4a98      	ldr	r2, [pc, #608]	; (80022b4 <HAL_GPIO_Init+0x2a0>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d875      	bhi.n	8002142 <HAL_GPIO_Init+0x12e>
 8002056:	4a98      	ldr	r2, [pc, #608]	; (80022b8 <HAL_GPIO_Init+0x2a4>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d058      	beq.n	800210e <HAL_GPIO_Init+0xfa>
 800205c:	4a96      	ldr	r2, [pc, #600]	; (80022b8 <HAL_GPIO_Init+0x2a4>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d86f      	bhi.n	8002142 <HAL_GPIO_Init+0x12e>
 8002062:	4a96      	ldr	r2, [pc, #600]	; (80022bc <HAL_GPIO_Init+0x2a8>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d052      	beq.n	800210e <HAL_GPIO_Init+0xfa>
 8002068:	4a94      	ldr	r2, [pc, #592]	; (80022bc <HAL_GPIO_Init+0x2a8>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d869      	bhi.n	8002142 <HAL_GPIO_Init+0x12e>
 800206e:	4a94      	ldr	r2, [pc, #592]	; (80022c0 <HAL_GPIO_Init+0x2ac>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d04c      	beq.n	800210e <HAL_GPIO_Init+0xfa>
 8002074:	4a92      	ldr	r2, [pc, #584]	; (80022c0 <HAL_GPIO_Init+0x2ac>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d863      	bhi.n	8002142 <HAL_GPIO_Init+0x12e>
 800207a:	4a92      	ldr	r2, [pc, #584]	; (80022c4 <HAL_GPIO_Init+0x2b0>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d046      	beq.n	800210e <HAL_GPIO_Init+0xfa>
 8002080:	4a90      	ldr	r2, [pc, #576]	; (80022c4 <HAL_GPIO_Init+0x2b0>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d85d      	bhi.n	8002142 <HAL_GPIO_Init+0x12e>
 8002086:	2b12      	cmp	r3, #18
 8002088:	d82a      	bhi.n	80020e0 <HAL_GPIO_Init+0xcc>
 800208a:	2b12      	cmp	r3, #18
 800208c:	d859      	bhi.n	8002142 <HAL_GPIO_Init+0x12e>
 800208e:	a201      	add	r2, pc, #4	; (adr r2, 8002094 <HAL_GPIO_Init+0x80>)
 8002090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002094:	0800210f 	.word	0x0800210f
 8002098:	080020e9 	.word	0x080020e9
 800209c:	080020fb 	.word	0x080020fb
 80020a0:	0800213d 	.word	0x0800213d
 80020a4:	08002143 	.word	0x08002143
 80020a8:	08002143 	.word	0x08002143
 80020ac:	08002143 	.word	0x08002143
 80020b0:	08002143 	.word	0x08002143
 80020b4:	08002143 	.word	0x08002143
 80020b8:	08002143 	.word	0x08002143
 80020bc:	08002143 	.word	0x08002143
 80020c0:	08002143 	.word	0x08002143
 80020c4:	08002143 	.word	0x08002143
 80020c8:	08002143 	.word	0x08002143
 80020cc:	08002143 	.word	0x08002143
 80020d0:	08002143 	.word	0x08002143
 80020d4:	08002143 	.word	0x08002143
 80020d8:	080020f1 	.word	0x080020f1
 80020dc:	08002105 	.word	0x08002105
 80020e0:	4a79      	ldr	r2, [pc, #484]	; (80022c8 <HAL_GPIO_Init+0x2b4>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d013      	beq.n	800210e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020e6:	e02c      	b.n	8002142 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	623b      	str	r3, [r7, #32]
          break;
 80020ee:	e029      	b.n	8002144 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	3304      	adds	r3, #4
 80020f6:	623b      	str	r3, [r7, #32]
          break;
 80020f8:	e024      	b.n	8002144 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	3308      	adds	r3, #8
 8002100:	623b      	str	r3, [r7, #32]
          break;
 8002102:	e01f      	b.n	8002144 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	330c      	adds	r3, #12
 800210a:	623b      	str	r3, [r7, #32]
          break;
 800210c:	e01a      	b.n	8002144 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d102      	bne.n	800211c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002116:	2304      	movs	r3, #4
 8002118:	623b      	str	r3, [r7, #32]
          break;
 800211a:	e013      	b.n	8002144 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d105      	bne.n	8002130 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002124:	2308      	movs	r3, #8
 8002126:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	69fa      	ldr	r2, [r7, #28]
 800212c:	611a      	str	r2, [r3, #16]
          break;
 800212e:	e009      	b.n	8002144 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002130:	2308      	movs	r3, #8
 8002132:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	69fa      	ldr	r2, [r7, #28]
 8002138:	615a      	str	r2, [r3, #20]
          break;
 800213a:	e003      	b.n	8002144 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800213c:	2300      	movs	r3, #0
 800213e:	623b      	str	r3, [r7, #32]
          break;
 8002140:	e000      	b.n	8002144 <HAL_GPIO_Init+0x130>
          break;
 8002142:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	2bff      	cmp	r3, #255	; 0xff
 8002148:	d801      	bhi.n	800214e <HAL_GPIO_Init+0x13a>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	e001      	b.n	8002152 <HAL_GPIO_Init+0x13e>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	3304      	adds	r3, #4
 8002152:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	2bff      	cmp	r3, #255	; 0xff
 8002158:	d802      	bhi.n	8002160 <HAL_GPIO_Init+0x14c>
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	e002      	b.n	8002166 <HAL_GPIO_Init+0x152>
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	3b08      	subs	r3, #8
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	210f      	movs	r1, #15
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	fa01 f303 	lsl.w	r3, r1, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	401a      	ands	r2, r3
 8002178:	6a39      	ldr	r1, [r7, #32]
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	fa01 f303 	lsl.w	r3, r1, r3
 8002180:	431a      	orrs	r2, r3
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 80b1 	beq.w	80022f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002194:	4b4d      	ldr	r3, [pc, #308]	; (80022cc <HAL_GPIO_Init+0x2b8>)
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	4a4c      	ldr	r2, [pc, #304]	; (80022cc <HAL_GPIO_Init+0x2b8>)
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	6193      	str	r3, [r2, #24]
 80021a0:	4b4a      	ldr	r3, [pc, #296]	; (80022cc <HAL_GPIO_Init+0x2b8>)
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021ac:	4a48      	ldr	r2, [pc, #288]	; (80022d0 <HAL_GPIO_Init+0x2bc>)
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	089b      	lsrs	r3, r3, #2
 80021b2:	3302      	adds	r3, #2
 80021b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	f003 0303 	and.w	r3, r3, #3
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	220f      	movs	r2, #15
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	4013      	ands	r3, r2
 80021ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a40      	ldr	r2, [pc, #256]	; (80022d4 <HAL_GPIO_Init+0x2c0>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d013      	beq.n	8002200 <HAL_GPIO_Init+0x1ec>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a3f      	ldr	r2, [pc, #252]	; (80022d8 <HAL_GPIO_Init+0x2c4>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d00d      	beq.n	80021fc <HAL_GPIO_Init+0x1e8>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a3e      	ldr	r2, [pc, #248]	; (80022dc <HAL_GPIO_Init+0x2c8>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d007      	beq.n	80021f8 <HAL_GPIO_Init+0x1e4>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a3d      	ldr	r2, [pc, #244]	; (80022e0 <HAL_GPIO_Init+0x2cc>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d101      	bne.n	80021f4 <HAL_GPIO_Init+0x1e0>
 80021f0:	2303      	movs	r3, #3
 80021f2:	e006      	b.n	8002202 <HAL_GPIO_Init+0x1ee>
 80021f4:	2304      	movs	r3, #4
 80021f6:	e004      	b.n	8002202 <HAL_GPIO_Init+0x1ee>
 80021f8:	2302      	movs	r3, #2
 80021fa:	e002      	b.n	8002202 <HAL_GPIO_Init+0x1ee>
 80021fc:	2301      	movs	r3, #1
 80021fe:	e000      	b.n	8002202 <HAL_GPIO_Init+0x1ee>
 8002200:	2300      	movs	r3, #0
 8002202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002204:	f002 0203 	and.w	r2, r2, #3
 8002208:	0092      	lsls	r2, r2, #2
 800220a:	4093      	lsls	r3, r2
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	4313      	orrs	r3, r2
 8002210:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002212:	492f      	ldr	r1, [pc, #188]	; (80022d0 <HAL_GPIO_Init+0x2bc>)
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	089b      	lsrs	r3, r3, #2
 8002218:	3302      	adds	r3, #2
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d006      	beq.n	800223a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800222c:	4b2d      	ldr	r3, [pc, #180]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	492c      	ldr	r1, [pc, #176]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	4313      	orrs	r3, r2
 8002236:	600b      	str	r3, [r1, #0]
 8002238:	e006      	b.n	8002248 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800223a:	4b2a      	ldr	r3, [pc, #168]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	43db      	mvns	r3, r3
 8002242:	4928      	ldr	r1, [pc, #160]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 8002244:	4013      	ands	r3, r2
 8002246:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d006      	beq.n	8002262 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002254:	4b23      	ldr	r3, [pc, #140]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	4922      	ldr	r1, [pc, #136]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	4313      	orrs	r3, r2
 800225e:	604b      	str	r3, [r1, #4]
 8002260:	e006      	b.n	8002270 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002262:	4b20      	ldr	r3, [pc, #128]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	43db      	mvns	r3, r3
 800226a:	491e      	ldr	r1, [pc, #120]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 800226c:	4013      	ands	r3, r2
 800226e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d006      	beq.n	800228a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800227c:	4b19      	ldr	r3, [pc, #100]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	4918      	ldr	r1, [pc, #96]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	4313      	orrs	r3, r2
 8002286:	608b      	str	r3, [r1, #8]
 8002288:	e006      	b.n	8002298 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800228a:	4b16      	ldr	r3, [pc, #88]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	43db      	mvns	r3, r3
 8002292:	4914      	ldr	r1, [pc, #80]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 8002294:	4013      	ands	r3, r2
 8002296:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d021      	beq.n	80022e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022a4:	4b0f      	ldr	r3, [pc, #60]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	490e      	ldr	r1, [pc, #56]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	60cb      	str	r3, [r1, #12]
 80022b0:	e021      	b.n	80022f6 <HAL_GPIO_Init+0x2e2>
 80022b2:	bf00      	nop
 80022b4:	10320000 	.word	0x10320000
 80022b8:	10310000 	.word	0x10310000
 80022bc:	10220000 	.word	0x10220000
 80022c0:	10210000 	.word	0x10210000
 80022c4:	10120000 	.word	0x10120000
 80022c8:	10110000 	.word	0x10110000
 80022cc:	40021000 	.word	0x40021000
 80022d0:	40010000 	.word	0x40010000
 80022d4:	40010800 	.word	0x40010800
 80022d8:	40010c00 	.word	0x40010c00
 80022dc:	40011000 	.word	0x40011000
 80022e0:	40011400 	.word	0x40011400
 80022e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022e8:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <HAL_GPIO_Init+0x304>)
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	43db      	mvns	r3, r3
 80022f0:	4909      	ldr	r1, [pc, #36]	; (8002318 <HAL_GPIO_Init+0x304>)
 80022f2:	4013      	ands	r3, r2
 80022f4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	3301      	adds	r3, #1
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	fa22 f303 	lsr.w	r3, r2, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	f47f ae8e 	bne.w	8002028 <HAL_GPIO_Init+0x14>
  }
}
 800230c:	bf00      	nop
 800230e:	bf00      	nop
 8002310:	372c      	adds	r7, #44	; 0x2c
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr
 8002318:	40010400 	.word	0x40010400

0800231c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	887b      	ldrh	r3, [r7, #2]
 800232e:	4013      	ands	r3, r2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d002      	beq.n	800233a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002334:	2301      	movs	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
 8002338:	e001      	b.n	800233e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800233a:	2300      	movs	r3, #0
 800233c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800233e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr

0800234a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
 8002352:	460b      	mov	r3, r1
 8002354:	807b      	strh	r3, [r7, #2]
 8002356:	4613      	mov	r3, r2
 8002358:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800235a:	787b      	ldrb	r3, [r7, #1]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002360:	887a      	ldrh	r2, [r7, #2]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002366:	e003      	b.n	8002370 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002368:	887b      	ldrh	r3, [r7, #2]
 800236a:	041a      	lsls	r2, r3, #16
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	611a      	str	r2, [r3, #16]
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	bc80      	pop	{r7}
 8002378:	4770      	bx	lr

0800237a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800237a:	b480      	push	{r7}
 800237c:	b085      	sub	sp, #20
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
 8002382:	460b      	mov	r3, r1
 8002384:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800238c:	887a      	ldrh	r2, [r7, #2]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	4013      	ands	r3, r2
 8002392:	041a      	lsls	r2, r3, #16
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	43d9      	mvns	r1, r3
 8002398:	887b      	ldrh	r3, [r7, #2]
 800239a:	400b      	ands	r3, r1
 800239c:	431a      	orrs	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	611a      	str	r2, [r3, #16]
}
 80023a2:	bf00      	nop
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr

080023ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e272      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 8087 	beq.w	80024da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023cc:	4b92      	ldr	r3, [pc, #584]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f003 030c 	and.w	r3, r3, #12
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d00c      	beq.n	80023f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023d8:	4b8f      	ldr	r3, [pc, #572]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 030c 	and.w	r3, r3, #12
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	d112      	bne.n	800240a <HAL_RCC_OscConfig+0x5e>
 80023e4:	4b8c      	ldr	r3, [pc, #560]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f0:	d10b      	bne.n	800240a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f2:	4b89      	ldr	r3, [pc, #548]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d06c      	beq.n	80024d8 <HAL_RCC_OscConfig+0x12c>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d168      	bne.n	80024d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e24c      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002412:	d106      	bne.n	8002422 <HAL_RCC_OscConfig+0x76>
 8002414:	4b80      	ldr	r3, [pc, #512]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a7f      	ldr	r2, [pc, #508]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 800241a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800241e:	6013      	str	r3, [r2, #0]
 8002420:	e02e      	b.n	8002480 <HAL_RCC_OscConfig+0xd4>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10c      	bne.n	8002444 <HAL_RCC_OscConfig+0x98>
 800242a:	4b7b      	ldr	r3, [pc, #492]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a7a      	ldr	r2, [pc, #488]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002430:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	4b78      	ldr	r3, [pc, #480]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a77      	ldr	r2, [pc, #476]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 800243c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	e01d      	b.n	8002480 <HAL_RCC_OscConfig+0xd4>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800244c:	d10c      	bne.n	8002468 <HAL_RCC_OscConfig+0xbc>
 800244e:	4b72      	ldr	r3, [pc, #456]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a71      	ldr	r2, [pc, #452]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	4b6f      	ldr	r3, [pc, #444]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a6e      	ldr	r2, [pc, #440]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	e00b      	b.n	8002480 <HAL_RCC_OscConfig+0xd4>
 8002468:	4b6b      	ldr	r3, [pc, #428]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a6a      	ldr	r2, [pc, #424]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 800246e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002472:	6013      	str	r3, [r2, #0]
 8002474:	4b68      	ldr	r3, [pc, #416]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a67      	ldr	r2, [pc, #412]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 800247a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800247e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d013      	beq.n	80024b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002488:	f7ff fbd8 	bl	8001c3c <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002490:	f7ff fbd4 	bl	8001c3c <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b64      	cmp	r3, #100	; 0x64
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e200      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a2:	4b5d      	ldr	r3, [pc, #372]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0f0      	beq.n	8002490 <HAL_RCC_OscConfig+0xe4>
 80024ae:	e014      	b.n	80024da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b0:	f7ff fbc4 	bl	8001c3c <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b8:	f7ff fbc0 	bl	8001c3c <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b64      	cmp	r3, #100	; 0x64
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e1ec      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ca:	4b53      	ldr	r3, [pc, #332]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f0      	bne.n	80024b8 <HAL_RCC_OscConfig+0x10c>
 80024d6:	e000      	b.n	80024da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d063      	beq.n	80025ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024e6:	4b4c      	ldr	r3, [pc, #304]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f003 030c 	and.w	r3, r3, #12
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00b      	beq.n	800250a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024f2:	4b49      	ldr	r3, [pc, #292]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f003 030c 	and.w	r3, r3, #12
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d11c      	bne.n	8002538 <HAL_RCC_OscConfig+0x18c>
 80024fe:	4b46      	ldr	r3, [pc, #280]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d116      	bne.n	8002538 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800250a:	4b43      	ldr	r3, [pc, #268]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d005      	beq.n	8002522 <HAL_RCC_OscConfig+0x176>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d001      	beq.n	8002522 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e1c0      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002522:	4b3d      	ldr	r3, [pc, #244]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4939      	ldr	r1, [pc, #228]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002532:	4313      	orrs	r3, r2
 8002534:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002536:	e03a      	b.n	80025ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d020      	beq.n	8002582 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002540:	4b36      	ldr	r3, [pc, #216]	; (800261c <HAL_RCC_OscConfig+0x270>)
 8002542:	2201      	movs	r2, #1
 8002544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002546:	f7ff fb79 	bl	8001c3c <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800254e:	f7ff fb75 	bl	8001c3c <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e1a1      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002560:	4b2d      	ldr	r3, [pc, #180]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0f0      	beq.n	800254e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256c:	4b2a      	ldr	r3, [pc, #168]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	4927      	ldr	r1, [pc, #156]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 800257c:	4313      	orrs	r3, r2
 800257e:	600b      	str	r3, [r1, #0]
 8002580:	e015      	b.n	80025ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002582:	4b26      	ldr	r3, [pc, #152]	; (800261c <HAL_RCC_OscConfig+0x270>)
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002588:	f7ff fb58 	bl	8001c3c <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002590:	f7ff fb54 	bl	8001c3c <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e180      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a2:	4b1d      	ldr	r3, [pc, #116]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d03a      	beq.n	8002630 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d019      	beq.n	80025f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025c2:	4b17      	ldr	r3, [pc, #92]	; (8002620 <HAL_RCC_OscConfig+0x274>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c8:	f7ff fb38 	bl	8001c3c <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025d0:	f7ff fb34 	bl	8001c3c <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e160      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e2:	4b0d      	ldr	r3, [pc, #52]	; (8002618 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0f0      	beq.n	80025d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025ee:	2001      	movs	r0, #1
 80025f0:	f000 fad8 	bl	8002ba4 <RCC_Delay>
 80025f4:	e01c      	b.n	8002630 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025f6:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <HAL_RCC_OscConfig+0x274>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025fc:	f7ff fb1e 	bl	8001c3c <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002602:	e00f      	b.n	8002624 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002604:	f7ff fb1a 	bl	8001c3c <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d908      	bls.n	8002624 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e146      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000
 800261c:	42420000 	.word	0x42420000
 8002620:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002624:	4b92      	ldr	r3, [pc, #584]	; (8002870 <HAL_RCC_OscConfig+0x4c4>)
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1e9      	bne.n	8002604 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 80a6 	beq.w	800278a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800263e:	2300      	movs	r3, #0
 8002640:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002642:	4b8b      	ldr	r3, [pc, #556]	; (8002870 <HAL_RCC_OscConfig+0x4c4>)
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10d      	bne.n	800266a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800264e:	4b88      	ldr	r3, [pc, #544]	; (8002870 <HAL_RCC_OscConfig+0x4c4>)
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	4a87      	ldr	r2, [pc, #540]	; (8002870 <HAL_RCC_OscConfig+0x4c4>)
 8002654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002658:	61d3      	str	r3, [r2, #28]
 800265a:	4b85      	ldr	r3, [pc, #532]	; (8002870 <HAL_RCC_OscConfig+0x4c4>)
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002662:	60bb      	str	r3, [r7, #8]
 8002664:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002666:	2301      	movs	r3, #1
 8002668:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800266a:	4b82      	ldr	r3, [pc, #520]	; (8002874 <HAL_RCC_OscConfig+0x4c8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002672:	2b00      	cmp	r3, #0
 8002674:	d118      	bne.n	80026a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002676:	4b7f      	ldr	r3, [pc, #508]	; (8002874 <HAL_RCC_OscConfig+0x4c8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a7e      	ldr	r2, [pc, #504]	; (8002874 <HAL_RCC_OscConfig+0x4c8>)
 800267c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002682:	f7ff fadb 	bl	8001c3c <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800268a:	f7ff fad7 	bl	8001c3c <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b64      	cmp	r3, #100	; 0x64
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e103      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269c:	4b75      	ldr	r3, [pc, #468]	; (8002874 <HAL_RCC_OscConfig+0x4c8>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0f0      	beq.n	800268a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d106      	bne.n	80026be <HAL_RCC_OscConfig+0x312>
 80026b0:	4b6f      	ldr	r3, [pc, #444]	; (8002870 <HAL_RCC_OscConfig+0x4c4>)
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	4a6e      	ldr	r2, [pc, #440]	; (8002870 <HAL_RCC_OscConfig+0x4c4>)
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	6213      	str	r3, [r2, #32]
 80026bc:	e02d      	b.n	800271a <HAL_RCC_OscConfig+0x36e>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10c      	bne.n	80026e0 <HAL_RCC_OscConfig+0x334>
 80026c6:	4b6a      	ldr	r3, [pc, #424]	; (8002870 <HAL_RCC_OscConfig+0x4c4>)
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	4a69      	ldr	r2, [pc, #420]	; (8002870 <HAL_RCC_OscConfig+0x4c4>)
 80026cc:	f023 0301 	bic.w	r3, r3, #1
 80026d0:	6213      	str	r3, [r2, #32]
 80026d2:	4b67      	ldr	r3, [pc, #412]	; (8002870 <HAL_RCC_OscConfig+0x4c4>)
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	4a66      	ldr	r2, [pc, #408]	; (8002870 <HAL_RCC_OscConfig+0x4c4>)
 80026d8:	f023 0304 	bic.w	r3, r3, #4
 80026dc:	6213      	str	r3, [r2, #32]
 80026de:	e01c      	b.n	800271a <HAL_RCC_OscConfig+0x36e>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	2b05      	cmp	r3, #5
 80026e6:	d10c      	bne.n	8002702 <HAL_RCC_OscConfig+0x356>
 80026e8:	4b61      	ldr	r3, [pc, #388]	; (8002870 <HAL_RCC_OscConfig+0x4c4>)
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	4a60      	ldr	r2, [pc, #384]	; (8002870 <HAL_RCC_OscConfig+0x4c4>)
 80026ee:	f043 0304 	orr.w	r3, r3, #4
 80026f2:	6213      	str	r3, [r2, #32]
 80026f4:	4b5e      	ldr	r3, [pc, #376]	; (8002870 <HAL_RCC_OscConfig+0x4c4>)
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	4a5d      	ldr	r2, [pc, #372]	; (8002870 <HAL_RCC_OscConfig+0x4c4>)
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	6213      	str	r3, [r2, #32]
 8002700:	e00b      	b.n	800271a <HAL_RCC_OscConfig+0x36e>
 8002702:	4b5b      	ldr	r3, [pc, #364]	; (8002870 <HAL_RCC_OscConfig+0x4c4>)
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	4a5a      	ldr	r2, [pc, #360]	; (8002870 <HAL_RCC_OscConfig+0x4c4>)
 8002708:	f023 0301 	bic.w	r3, r3, #1
 800270c:	6213      	str	r3, [r2, #32]
 800270e:	4b58      	ldr	r3, [pc, #352]	; (8002870 <HAL_RCC_OscConfig+0x4c4>)
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	4a57      	ldr	r2, [pc, #348]	; (8002870 <HAL_RCC_OscConfig+0x4c4>)
 8002714:	f023 0304 	bic.w	r3, r3, #4
 8002718:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d015      	beq.n	800274e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002722:	f7ff fa8b 	bl	8001c3c <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002728:	e00a      	b.n	8002740 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800272a:	f7ff fa87 	bl	8001c3c <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	f241 3288 	movw	r2, #5000	; 0x1388
 8002738:	4293      	cmp	r3, r2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e0b1      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002740:	4b4b      	ldr	r3, [pc, #300]	; (8002870 <HAL_RCC_OscConfig+0x4c4>)
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d0ee      	beq.n	800272a <HAL_RCC_OscConfig+0x37e>
 800274c:	e014      	b.n	8002778 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800274e:	f7ff fa75 	bl	8001c3c <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002754:	e00a      	b.n	800276c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002756:	f7ff fa71 	bl	8001c3c <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	f241 3288 	movw	r2, #5000	; 0x1388
 8002764:	4293      	cmp	r3, r2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e09b      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800276c:	4b40      	ldr	r3, [pc, #256]	; (8002870 <HAL_RCC_OscConfig+0x4c4>)
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1ee      	bne.n	8002756 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002778:	7dfb      	ldrb	r3, [r7, #23]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d105      	bne.n	800278a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800277e:	4b3c      	ldr	r3, [pc, #240]	; (8002870 <HAL_RCC_OscConfig+0x4c4>)
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	4a3b      	ldr	r2, [pc, #236]	; (8002870 <HAL_RCC_OscConfig+0x4c4>)
 8002784:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002788:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	2b00      	cmp	r3, #0
 8002790:	f000 8087 	beq.w	80028a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002794:	4b36      	ldr	r3, [pc, #216]	; (8002870 <HAL_RCC_OscConfig+0x4c4>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f003 030c 	and.w	r3, r3, #12
 800279c:	2b08      	cmp	r3, #8
 800279e:	d061      	beq.n	8002864 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69db      	ldr	r3, [r3, #28]
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d146      	bne.n	8002836 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a8:	4b33      	ldr	r3, [pc, #204]	; (8002878 <HAL_RCC_OscConfig+0x4cc>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ae:	f7ff fa45 	bl	8001c3c <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b6:	f7ff fa41 	bl	8001c3c <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e06d      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027c8:	4b29      	ldr	r3, [pc, #164]	; (8002870 <HAL_RCC_OscConfig+0x4c4>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1f0      	bne.n	80027b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027dc:	d108      	bne.n	80027f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027de:	4b24      	ldr	r3, [pc, #144]	; (8002870 <HAL_RCC_OscConfig+0x4c4>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	4921      	ldr	r1, [pc, #132]	; (8002870 <HAL_RCC_OscConfig+0x4c4>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027f0:	4b1f      	ldr	r3, [pc, #124]	; (8002870 <HAL_RCC_OscConfig+0x4c4>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a19      	ldr	r1, [r3, #32]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002800:	430b      	orrs	r3, r1
 8002802:	491b      	ldr	r1, [pc, #108]	; (8002870 <HAL_RCC_OscConfig+0x4c4>)
 8002804:	4313      	orrs	r3, r2
 8002806:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002808:	4b1b      	ldr	r3, [pc, #108]	; (8002878 <HAL_RCC_OscConfig+0x4cc>)
 800280a:	2201      	movs	r2, #1
 800280c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280e:	f7ff fa15 	bl	8001c3c <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002814:	e008      	b.n	8002828 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002816:	f7ff fa11 	bl	8001c3c <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e03d      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002828:	4b11      	ldr	r3, [pc, #68]	; (8002870 <HAL_RCC_OscConfig+0x4c4>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0f0      	beq.n	8002816 <HAL_RCC_OscConfig+0x46a>
 8002834:	e035      	b.n	80028a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002836:	4b10      	ldr	r3, [pc, #64]	; (8002878 <HAL_RCC_OscConfig+0x4cc>)
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283c:	f7ff f9fe 	bl	8001c3c <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002844:	f7ff f9fa 	bl	8001c3c <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e026      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002856:	4b06      	ldr	r3, [pc, #24]	; (8002870 <HAL_RCC_OscConfig+0x4c4>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0x498>
 8002862:	e01e      	b.n	80028a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	69db      	ldr	r3, [r3, #28]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d107      	bne.n	800287c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e019      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
 8002870:	40021000 	.word	0x40021000
 8002874:	40007000 	.word	0x40007000
 8002878:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800287c:	4b0b      	ldr	r3, [pc, #44]	; (80028ac <HAL_RCC_OscConfig+0x500>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	429a      	cmp	r2, r3
 800288e:	d106      	bne.n	800289e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289a:	429a      	cmp	r2, r3
 800289c:	d001      	beq.n	80028a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e000      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3718      	adds	r7, #24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40021000 	.word	0x40021000

080028b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e0d0      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028c4:	4b6a      	ldr	r3, [pc, #424]	; (8002a70 <HAL_RCC_ClockConfig+0x1c0>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d910      	bls.n	80028f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028d2:	4b67      	ldr	r3, [pc, #412]	; (8002a70 <HAL_RCC_ClockConfig+0x1c0>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f023 0207 	bic.w	r2, r3, #7
 80028da:	4965      	ldr	r1, [pc, #404]	; (8002a70 <HAL_RCC_ClockConfig+0x1c0>)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	4313      	orrs	r3, r2
 80028e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e2:	4b63      	ldr	r3, [pc, #396]	; (8002a70 <HAL_RCC_ClockConfig+0x1c0>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d001      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e0b8      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d020      	beq.n	8002942 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b00      	cmp	r3, #0
 800290a:	d005      	beq.n	8002918 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800290c:	4b59      	ldr	r3, [pc, #356]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	4a58      	ldr	r2, [pc, #352]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002912:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002916:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0308 	and.w	r3, r3, #8
 8002920:	2b00      	cmp	r3, #0
 8002922:	d005      	beq.n	8002930 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002924:	4b53      	ldr	r3, [pc, #332]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	4a52      	ldr	r2, [pc, #328]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 800292a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800292e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002930:	4b50      	ldr	r3, [pc, #320]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	494d      	ldr	r1, [pc, #308]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 800293e:	4313      	orrs	r3, r2
 8002940:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d040      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d107      	bne.n	8002966 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002956:	4b47      	ldr	r3, [pc, #284]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d115      	bne.n	800298e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e07f      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b02      	cmp	r3, #2
 800296c:	d107      	bne.n	800297e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800296e:	4b41      	ldr	r3, [pc, #260]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d109      	bne.n	800298e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e073      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800297e:	4b3d      	ldr	r3, [pc, #244]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e06b      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800298e:	4b39      	ldr	r3, [pc, #228]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f023 0203 	bic.w	r2, r3, #3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	4936      	ldr	r1, [pc, #216]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 800299c:	4313      	orrs	r3, r2
 800299e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029a0:	f7ff f94c 	bl	8001c3c <HAL_GetTick>
 80029a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a6:	e00a      	b.n	80029be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a8:	f7ff f948 	bl	8001c3c <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e053      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029be:	4b2d      	ldr	r3, [pc, #180]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f003 020c 	and.w	r2, r3, #12
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d1eb      	bne.n	80029a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029d0:	4b27      	ldr	r3, [pc, #156]	; (8002a70 <HAL_RCC_ClockConfig+0x1c0>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d210      	bcs.n	8002a00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029de:	4b24      	ldr	r3, [pc, #144]	; (8002a70 <HAL_RCC_ClockConfig+0x1c0>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f023 0207 	bic.w	r2, r3, #7
 80029e6:	4922      	ldr	r1, [pc, #136]	; (8002a70 <HAL_RCC_ClockConfig+0x1c0>)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ee:	4b20      	ldr	r3, [pc, #128]	; (8002a70 <HAL_RCC_ClockConfig+0x1c0>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d001      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e032      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d008      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a0c:	4b19      	ldr	r3, [pc, #100]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	4916      	ldr	r1, [pc, #88]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d009      	beq.n	8002a3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a2a:	4b12      	ldr	r3, [pc, #72]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	490e      	ldr	r1, [pc, #56]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a3e:	f000 f821 	bl	8002a84 <HAL_RCC_GetSysClockFreq>
 8002a42:	4602      	mov	r2, r0
 8002a44:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	091b      	lsrs	r3, r3, #4
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	490a      	ldr	r1, [pc, #40]	; (8002a78 <HAL_RCC_ClockConfig+0x1c8>)
 8002a50:	5ccb      	ldrb	r3, [r1, r3]
 8002a52:	fa22 f303 	lsr.w	r3, r2, r3
 8002a56:	4a09      	ldr	r2, [pc, #36]	; (8002a7c <HAL_RCC_ClockConfig+0x1cc>)
 8002a58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a5a:	4b09      	ldr	r3, [pc, #36]	; (8002a80 <HAL_RCC_ClockConfig+0x1d0>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff f8aa 	bl	8001bb8 <HAL_InitTick>

  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40022000 	.word	0x40022000
 8002a74:	40021000 	.word	0x40021000
 8002a78:	08003c38 	.word	0x08003c38
 8002a7c:	20000004 	.word	0x20000004
 8002a80:	20000008 	.word	0x20000008

08002a84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a84:	b490      	push	{r4, r7}
 8002a86:	b08a      	sub	sp, #40	; 0x28
 8002a88:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a8a:	4b29      	ldr	r3, [pc, #164]	; (8002b30 <HAL_RCC_GetSysClockFreq+0xac>)
 8002a8c:	1d3c      	adds	r4, r7, #4
 8002a8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a94:	f240 2301 	movw	r3, #513	; 0x201
 8002a98:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61fb      	str	r3, [r7, #28]
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61bb      	str	r3, [r7, #24]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002aae:	4b21      	ldr	r3, [pc, #132]	; (8002b34 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d002      	beq.n	8002ac4 <HAL_RCC_GetSysClockFreq+0x40>
 8002abe:	2b08      	cmp	r3, #8
 8002ac0:	d003      	beq.n	8002aca <HAL_RCC_GetSysClockFreq+0x46>
 8002ac2:	e02b      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ac4:	4b1c      	ldr	r3, [pc, #112]	; (8002b38 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ac6:	623b      	str	r3, [r7, #32]
      break;
 8002ac8:	e02b      	b.n	8002b22 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	0c9b      	lsrs	r3, r3, #18
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	3328      	adds	r3, #40	; 0x28
 8002ad4:	443b      	add	r3, r7
 8002ad6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ada:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d012      	beq.n	8002b0c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ae6:	4b13      	ldr	r3, [pc, #76]	; (8002b34 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	0c5b      	lsrs	r3, r3, #17
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	3328      	adds	r3, #40	; 0x28
 8002af2:	443b      	add	r3, r7
 8002af4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002af8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	4a0e      	ldr	r2, [pc, #56]	; (8002b38 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002afe:	fb03 f202 	mul.w	r2, r3, r2
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b08:	627b      	str	r3, [r7, #36]	; 0x24
 8002b0a:	e004      	b.n	8002b16 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	4a0b      	ldr	r2, [pc, #44]	; (8002b3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b10:	fb02 f303 	mul.w	r3, r2, r3
 8002b14:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	623b      	str	r3, [r7, #32]
      break;
 8002b1a:	e002      	b.n	8002b22 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b1c:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b1e:	623b      	str	r3, [r7, #32]
      break;
 8002b20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b22:	6a3b      	ldr	r3, [r7, #32]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3728      	adds	r7, #40	; 0x28
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bc90      	pop	{r4, r7}
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	08003c28 	.word	0x08003c28
 8002b34:	40021000 	.word	0x40021000
 8002b38:	007a1200 	.word	0x007a1200
 8002b3c:	003d0900 	.word	0x003d0900

08002b40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b44:	4b02      	ldr	r3, [pc, #8]	; (8002b50 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b46:	681b      	ldr	r3, [r3, #0]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr
 8002b50:	20000004 	.word	0x20000004

08002b54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b58:	f7ff fff2 	bl	8002b40 <HAL_RCC_GetHCLKFreq>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	0a1b      	lsrs	r3, r3, #8
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	4903      	ldr	r1, [pc, #12]	; (8002b78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b6a:	5ccb      	ldrb	r3, [r1, r3]
 8002b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40021000 	.word	0x40021000
 8002b78:	08003c48 	.word	0x08003c48

08002b7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b80:	f7ff ffde 	bl	8002b40 <HAL_RCC_GetHCLKFreq>
 8002b84:	4602      	mov	r2, r0
 8002b86:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	0adb      	lsrs	r3, r3, #11
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	4903      	ldr	r1, [pc, #12]	; (8002ba0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b92:	5ccb      	ldrb	r3, [r1, r3]
 8002b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	08003c48 	.word	0x08003c48

08002ba4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bac:	4b0a      	ldr	r3, [pc, #40]	; (8002bd8 <RCC_Delay+0x34>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a0a      	ldr	r2, [pc, #40]	; (8002bdc <RCC_Delay+0x38>)
 8002bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb6:	0a5b      	lsrs	r3, r3, #9
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	fb02 f303 	mul.w	r3, r2, r3
 8002bbe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bc0:	bf00      	nop
  }
  while (Delay --);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	1e5a      	subs	r2, r3, #1
 8002bc6:	60fa      	str	r2, [r7, #12]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1f9      	bne.n	8002bc0 <RCC_Delay+0x1c>
}
 8002bcc:	bf00      	nop
 8002bce:	bf00      	nop
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr
 8002bd8:	20000004 	.word	0x20000004
 8002bdc:	10624dd3 	.word	0x10624dd3

08002be0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e041      	b.n	8002c76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d106      	bne.n	8002c0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f7fe fef0 	bl	80019ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3304      	adds	r3, #4
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4610      	mov	r0, r2
 8002c20:	f000 f93c 	bl	8002e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
	...

08002c80 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d001      	beq.n	8002c98 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e032      	b.n	8002cfe <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a18      	ldr	r2, [pc, #96]	; (8002d08 <HAL_TIM_Base_Start+0x88>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d00e      	beq.n	8002cc8 <HAL_TIM_Base_Start+0x48>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb2:	d009      	beq.n	8002cc8 <HAL_TIM_Base_Start+0x48>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a14      	ldr	r2, [pc, #80]	; (8002d0c <HAL_TIM_Base_Start+0x8c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d004      	beq.n	8002cc8 <HAL_TIM_Base_Start+0x48>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a13      	ldr	r2, [pc, #76]	; (8002d10 <HAL_TIM_Base_Start+0x90>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d111      	bne.n	8002cec <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2b06      	cmp	r3, #6
 8002cd8:	d010      	beq.n	8002cfc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f042 0201 	orr.w	r2, r2, #1
 8002ce8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cea:	e007      	b.n	8002cfc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0201 	orr.w	r2, r2, #1
 8002cfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr
 8002d08:	40012c00 	.word	0x40012c00
 8002d0c:	40000400 	.word	0x40000400
 8002d10:	40000800 	.word	0x40000800

08002d14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d101      	bne.n	8002d2c <HAL_TIM_ConfigClockSource+0x18>
 8002d28:	2302      	movs	r3, #2
 8002d2a:	e0b3      	b.n	8002e94 <HAL_TIM_ConfigClockSource+0x180>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2202      	movs	r2, #2
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d52:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d64:	d03e      	beq.n	8002de4 <HAL_TIM_ConfigClockSource+0xd0>
 8002d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d6a:	f200 8087 	bhi.w	8002e7c <HAL_TIM_ConfigClockSource+0x168>
 8002d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d72:	f000 8085 	beq.w	8002e80 <HAL_TIM_ConfigClockSource+0x16c>
 8002d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d7a:	d87f      	bhi.n	8002e7c <HAL_TIM_ConfigClockSource+0x168>
 8002d7c:	2b70      	cmp	r3, #112	; 0x70
 8002d7e:	d01a      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0xa2>
 8002d80:	2b70      	cmp	r3, #112	; 0x70
 8002d82:	d87b      	bhi.n	8002e7c <HAL_TIM_ConfigClockSource+0x168>
 8002d84:	2b60      	cmp	r3, #96	; 0x60
 8002d86:	d050      	beq.n	8002e2a <HAL_TIM_ConfigClockSource+0x116>
 8002d88:	2b60      	cmp	r3, #96	; 0x60
 8002d8a:	d877      	bhi.n	8002e7c <HAL_TIM_ConfigClockSource+0x168>
 8002d8c:	2b50      	cmp	r3, #80	; 0x50
 8002d8e:	d03c      	beq.n	8002e0a <HAL_TIM_ConfigClockSource+0xf6>
 8002d90:	2b50      	cmp	r3, #80	; 0x50
 8002d92:	d873      	bhi.n	8002e7c <HAL_TIM_ConfigClockSource+0x168>
 8002d94:	2b40      	cmp	r3, #64	; 0x40
 8002d96:	d058      	beq.n	8002e4a <HAL_TIM_ConfigClockSource+0x136>
 8002d98:	2b40      	cmp	r3, #64	; 0x40
 8002d9a:	d86f      	bhi.n	8002e7c <HAL_TIM_ConfigClockSource+0x168>
 8002d9c:	2b30      	cmp	r3, #48	; 0x30
 8002d9e:	d064      	beq.n	8002e6a <HAL_TIM_ConfigClockSource+0x156>
 8002da0:	2b30      	cmp	r3, #48	; 0x30
 8002da2:	d86b      	bhi.n	8002e7c <HAL_TIM_ConfigClockSource+0x168>
 8002da4:	2b20      	cmp	r3, #32
 8002da6:	d060      	beq.n	8002e6a <HAL_TIM_ConfigClockSource+0x156>
 8002da8:	2b20      	cmp	r3, #32
 8002daa:	d867      	bhi.n	8002e7c <HAL_TIM_ConfigClockSource+0x168>
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d05c      	beq.n	8002e6a <HAL_TIM_ConfigClockSource+0x156>
 8002db0:	2b10      	cmp	r3, #16
 8002db2:	d05a      	beq.n	8002e6a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002db4:	e062      	b.n	8002e7c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6818      	ldr	r0, [r3, #0]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	6899      	ldr	r1, [r3, #8]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f000 f942 	bl	800304e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002dd8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	609a      	str	r2, [r3, #8]
      break;
 8002de2:	e04e      	b.n	8002e82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6818      	ldr	r0, [r3, #0]
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	6899      	ldr	r1, [r3, #8]
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f000 f92b 	bl	800304e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e06:	609a      	str	r2, [r3, #8]
      break;
 8002e08:	e03b      	b.n	8002e82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6818      	ldr	r0, [r3, #0]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	6859      	ldr	r1, [r3, #4]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	461a      	mov	r2, r3
 8002e18:	f000 f8a2 	bl	8002f60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2150      	movs	r1, #80	; 0x50
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 f8f9 	bl	800301a <TIM_ITRx_SetConfig>
      break;
 8002e28:	e02b      	b.n	8002e82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6818      	ldr	r0, [r3, #0]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	6859      	ldr	r1, [r3, #4]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	461a      	mov	r2, r3
 8002e38:	f000 f8c0 	bl	8002fbc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2160      	movs	r1, #96	; 0x60
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 f8e9 	bl	800301a <TIM_ITRx_SetConfig>
      break;
 8002e48:	e01b      	b.n	8002e82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6818      	ldr	r0, [r3, #0]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	6859      	ldr	r1, [r3, #4]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	461a      	mov	r2, r3
 8002e58:	f000 f882 	bl	8002f60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2140      	movs	r1, #64	; 0x40
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 f8d9 	bl	800301a <TIM_ITRx_SetConfig>
      break;
 8002e68:	e00b      	b.n	8002e82 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4619      	mov	r1, r3
 8002e74:	4610      	mov	r0, r2
 8002e76:	f000 f8d0 	bl	800301a <TIM_ITRx_SetConfig>
        break;
 8002e7a:	e002      	b.n	8002e82 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002e7c:	bf00      	nop
 8002e7e:	e000      	b.n	8002e82 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002e80:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a29      	ldr	r2, [pc, #164]	; (8002f54 <TIM_Base_SetConfig+0xb8>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d00b      	beq.n	8002ecc <TIM_Base_SetConfig+0x30>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eba:	d007      	beq.n	8002ecc <TIM_Base_SetConfig+0x30>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a26      	ldr	r2, [pc, #152]	; (8002f58 <TIM_Base_SetConfig+0xbc>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d003      	beq.n	8002ecc <TIM_Base_SetConfig+0x30>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a25      	ldr	r2, [pc, #148]	; (8002f5c <TIM_Base_SetConfig+0xc0>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d108      	bne.n	8002ede <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ed2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a1c      	ldr	r2, [pc, #112]	; (8002f54 <TIM_Base_SetConfig+0xb8>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d00b      	beq.n	8002efe <TIM_Base_SetConfig+0x62>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eec:	d007      	beq.n	8002efe <TIM_Base_SetConfig+0x62>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a19      	ldr	r2, [pc, #100]	; (8002f58 <TIM_Base_SetConfig+0xbc>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d003      	beq.n	8002efe <TIM_Base_SetConfig+0x62>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a18      	ldr	r2, [pc, #96]	; (8002f5c <TIM_Base_SetConfig+0xc0>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d108      	bne.n	8002f10 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a07      	ldr	r2, [pc, #28]	; (8002f54 <TIM_Base_SetConfig+0xb8>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d103      	bne.n	8002f44 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	691a      	ldr	r2, [r3, #16]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	615a      	str	r2, [r3, #20]
}
 8002f4a:	bf00      	nop
 8002f4c:	3714      	adds	r7, #20
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr
 8002f54:	40012c00 	.word	0x40012c00
 8002f58:	40000400 	.word	0x40000400
 8002f5c:	40000800 	.word	0x40000800

08002f60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b087      	sub	sp, #28
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	f023 0201 	bic.w	r2, r3, #1
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f023 030a 	bic.w	r3, r3, #10
 8002f9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	621a      	str	r2, [r3, #32]
}
 8002fb2:	bf00      	nop
 8002fb4:	371c      	adds	r7, #28
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr

08002fbc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b087      	sub	sp, #28
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	f023 0210 	bic.w	r2, r3, #16
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fe6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	031b      	lsls	r3, r3, #12
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ff8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	4313      	orrs	r3, r2
 8003002:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	621a      	str	r2, [r3, #32]
}
 8003010:	bf00      	nop
 8003012:	371c      	adds	r7, #28
 8003014:	46bd      	mov	sp, r7
 8003016:	bc80      	pop	{r7}
 8003018:	4770      	bx	lr

0800301a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800301a:	b480      	push	{r7}
 800301c:	b085      	sub	sp, #20
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
 8003022:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003030:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4313      	orrs	r3, r2
 8003038:	f043 0307 	orr.w	r3, r3, #7
 800303c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	609a      	str	r2, [r3, #8]
}
 8003044:	bf00      	nop
 8003046:	3714      	adds	r7, #20
 8003048:	46bd      	mov	sp, r7
 800304a:	bc80      	pop	{r7}
 800304c:	4770      	bx	lr

0800304e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800304e:	b480      	push	{r7}
 8003050:	b087      	sub	sp, #28
 8003052:	af00      	add	r7, sp, #0
 8003054:	60f8      	str	r0, [r7, #12]
 8003056:	60b9      	str	r1, [r7, #8]
 8003058:	607a      	str	r2, [r7, #4]
 800305a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003068:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	021a      	lsls	r2, r3, #8
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	431a      	orrs	r2, r3
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	4313      	orrs	r3, r2
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	4313      	orrs	r3, r2
 800307a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	609a      	str	r2, [r3, #8]
}
 8003082:	bf00      	nop
 8003084:	371c      	adds	r7, #28
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr

0800308c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800309c:	2b01      	cmp	r3, #1
 800309e:	d101      	bne.n	80030a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030a0:	2302      	movs	r3, #2
 80030a2:	e046      	b.n	8003132 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2202      	movs	r2, #2
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a16      	ldr	r2, [pc, #88]	; (800313c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d00e      	beq.n	8003106 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f0:	d009      	beq.n	8003106 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a12      	ldr	r2, [pc, #72]	; (8003140 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d004      	beq.n	8003106 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a10      	ldr	r2, [pc, #64]	; (8003144 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d10c      	bne.n	8003120 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800310c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	4313      	orrs	r3, r2
 8003116:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3714      	adds	r7, #20
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr
 800313c:	40012c00 	.word	0x40012c00
 8003140:	40000400 	.word	0x40000400
 8003144:	40000800 	.word	0x40000800

08003148 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e03f      	b.n	80031da <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d106      	bne.n	8003174 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7fe fc5a 	bl	8001a28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2224      	movs	r2, #36	; 0x24
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68da      	ldr	r2, [r3, #12]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800318a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 fc85 	bl	8003a9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	691a      	ldr	r2, [r3, #16]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	695a      	ldr	r2, [r3, #20]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68da      	ldr	r2, [r3, #12]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2220      	movs	r2, #32
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2220      	movs	r2, #32
 80031d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b08a      	sub	sp, #40	; 0x28
 80031e6:	af02      	add	r7, sp, #8
 80031e8:	60f8      	str	r0, [r7, #12]
 80031ea:	60b9      	str	r1, [r7, #8]
 80031ec:	603b      	str	r3, [r7, #0]
 80031ee:	4613      	mov	r3, r2
 80031f0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b20      	cmp	r3, #32
 8003200:	d17c      	bne.n	80032fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d002      	beq.n	800320e <HAL_UART_Transmit+0x2c>
 8003208:	88fb      	ldrh	r3, [r7, #6]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e075      	b.n	80032fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003218:	2b01      	cmp	r3, #1
 800321a:	d101      	bne.n	8003220 <HAL_UART_Transmit+0x3e>
 800321c:	2302      	movs	r3, #2
 800321e:	e06e      	b.n	80032fe <HAL_UART_Transmit+0x11c>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2221      	movs	r2, #33	; 0x21
 8003232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003236:	f7fe fd01 	bl	8001c3c <HAL_GetTick>
 800323a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	88fa      	ldrh	r2, [r7, #6]
 8003240:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	88fa      	ldrh	r2, [r7, #6]
 8003246:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003250:	d108      	bne.n	8003264 <HAL_UART_Transmit+0x82>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d104      	bne.n	8003264 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800325a:	2300      	movs	r3, #0
 800325c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	61bb      	str	r3, [r7, #24]
 8003262:	e003      	b.n	800326c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003268:	2300      	movs	r3, #0
 800326a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003274:	e02a      	b.n	80032cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	2200      	movs	r2, #0
 800327e:	2180      	movs	r1, #128	; 0x80
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 fa38 	bl	80036f6 <UART_WaitOnFlagUntilTimeout>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e036      	b.n	80032fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10b      	bne.n	80032ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	881b      	ldrh	r3, [r3, #0]
 800329a:	461a      	mov	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	3302      	adds	r3, #2
 80032aa:	61bb      	str	r3, [r7, #24]
 80032ac:	e007      	b.n	80032be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	781a      	ldrb	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	3301      	adds	r3, #1
 80032bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1cf      	bne.n	8003276 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2200      	movs	r2, #0
 80032de:	2140      	movs	r1, #64	; 0x40
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 fa08 	bl	80036f6 <UART_WaitOnFlagUntilTimeout>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e006      	b.n	80032fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2220      	movs	r2, #32
 80032f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80032f8:	2300      	movs	r3, #0
 80032fa:	e000      	b.n	80032fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80032fc:	2302      	movs	r3, #2
  }
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3720      	adds	r7, #32
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b084      	sub	sp, #16
 800330a:	af00      	add	r7, sp, #0
 800330c:	60f8      	str	r0, [r7, #12]
 800330e:	60b9      	str	r1, [r7, #8]
 8003310:	4613      	mov	r3, r2
 8003312:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b20      	cmp	r3, #32
 800331e:	d11d      	bne.n	800335c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d002      	beq.n	800332c <HAL_UART_Receive_IT+0x26>
 8003326:	88fb      	ldrh	r3, [r7, #6]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d101      	bne.n	8003330 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e016      	b.n	800335e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003336:	2b01      	cmp	r3, #1
 8003338:	d101      	bne.n	800333e <HAL_UART_Receive_IT+0x38>
 800333a:	2302      	movs	r3, #2
 800333c:	e00f      	b.n	800335e <HAL_UART_Receive_IT+0x58>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800334c:	88fb      	ldrh	r3, [r7, #6]
 800334e:	461a      	mov	r2, r3
 8003350:	68b9      	ldr	r1, [r7, #8]
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 fa19 	bl	800378a <UART_Start_Receive_IT>
 8003358:	4603      	mov	r3, r0
 800335a:	e000      	b.n	800335e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800335c:	2302      	movs	r3, #2
  }
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
	...

08003368 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b08a      	sub	sp, #40	; 0x28
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003388:	2300      	movs	r3, #0
 800338a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800338c:	2300      	movs	r3, #0
 800338e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10d      	bne.n	80033ba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	f003 0320 	and.w	r3, r3, #32
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d008      	beq.n	80033ba <HAL_UART_IRQHandler+0x52>
 80033a8:	6a3b      	ldr	r3, [r7, #32]
 80033aa:	f003 0320 	and.w	r3, r3, #32
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 fac9 	bl	800394a <UART_Receive_IT>
      return;
 80033b8:	e17b      	b.n	80036b2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 80b1 	beq.w	8003524 <HAL_UART_IRQHandler+0x1bc>
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d105      	bne.n	80033d8 <HAL_UART_IRQHandler+0x70>
 80033cc:	6a3b      	ldr	r3, [r7, #32]
 80033ce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 80a6 	beq.w	8003524 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00a      	beq.n	80033f8 <HAL_UART_IRQHandler+0x90>
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d005      	beq.n	80033f8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f0:	f043 0201 	orr.w	r2, r3, #1
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fa:	f003 0304 	and.w	r3, r3, #4
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00a      	beq.n	8003418 <HAL_UART_IRQHandler+0xb0>
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	d005      	beq.n	8003418 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	f043 0202 	orr.w	r2, r3, #2
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00a      	beq.n	8003438 <HAL_UART_IRQHandler+0xd0>
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b00      	cmp	r3, #0
 800342a:	d005      	beq.n	8003438 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	f043 0204 	orr.w	r2, r3, #4
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00f      	beq.n	8003462 <HAL_UART_IRQHandler+0xfa>
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	f003 0320 	and.w	r3, r3, #32
 8003448:	2b00      	cmp	r3, #0
 800344a:	d104      	bne.n	8003456 <HAL_UART_IRQHandler+0xee>
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d005      	beq.n	8003462 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	f043 0208 	orr.w	r2, r3, #8
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 811e 	beq.w	80036a8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	f003 0320 	and.w	r3, r3, #32
 8003472:	2b00      	cmp	r3, #0
 8003474:	d007      	beq.n	8003486 <HAL_UART_IRQHandler+0x11e>
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	f003 0320 	and.w	r3, r3, #32
 800347c:	2b00      	cmp	r3, #0
 800347e:	d002      	beq.n	8003486 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 fa62 	bl	800394a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003490:	2b00      	cmp	r3, #0
 8003492:	bf14      	ite	ne
 8003494:	2301      	movne	r3, #1
 8003496:	2300      	moveq	r3, #0
 8003498:	b2db      	uxtb	r3, r3
 800349a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a0:	f003 0308 	and.w	r3, r3, #8
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d102      	bne.n	80034ae <HAL_UART_IRQHandler+0x146>
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d031      	beq.n	8003512 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f9a4 	bl	80037fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d023      	beq.n	800350a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	695a      	ldr	r2, [r3, #20]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034d0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d013      	beq.n	8003502 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034de:	4a76      	ldr	r2, [pc, #472]	; (80036b8 <HAL_UART_IRQHandler+0x350>)
 80034e0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fe fd1e 	bl	8001f28 <HAL_DMA_Abort_IT>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d016      	beq.n	8003520 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034fc:	4610      	mov	r0, r2
 80034fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003500:	e00e      	b.n	8003520 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f8e3 	bl	80036ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003508:	e00a      	b.n	8003520 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f8df 	bl	80036ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003510:	e006      	b.n	8003520 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f8db 	bl	80036ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800351e:	e0c3      	b.n	80036a8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003520:	bf00      	nop
    return;
 8003522:	e0c1      	b.n	80036a8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003528:	2b01      	cmp	r3, #1
 800352a:	f040 80a1 	bne.w	8003670 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	f003 0310 	and.w	r3, r3, #16
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 809b 	beq.w	8003670 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800353a:	6a3b      	ldr	r3, [r7, #32]
 800353c:	f003 0310 	and.w	r3, r3, #16
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 8095 	beq.w	8003670 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003546:	2300      	movs	r3, #0
 8003548:	60fb      	str	r3, [r7, #12]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	60fb      	str	r3, [r7, #12]
 800355a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003566:	2b00      	cmp	r3, #0
 8003568:	d04e      	beq.n	8003608 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003574:	8a3b      	ldrh	r3, [r7, #16]
 8003576:	2b00      	cmp	r3, #0
 8003578:	f000 8098 	beq.w	80036ac <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003580:	8a3a      	ldrh	r2, [r7, #16]
 8003582:	429a      	cmp	r2, r3
 8003584:	f080 8092 	bcs.w	80036ac <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	8a3a      	ldrh	r2, [r7, #16]
 800358c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	2b20      	cmp	r3, #32
 8003596:	d02b      	beq.n	80035f0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035a6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	695a      	ldr	r2, [r3, #20]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0201 	bic.w	r2, r2, #1
 80035b6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695a      	ldr	r2, [r3, #20]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035c6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2220      	movs	r2, #32
 80035cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68da      	ldr	r2, [r3, #12]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0210 	bic.w	r2, r2, #16
 80035e4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7fe fc61 	bl	8001eb2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	4619      	mov	r1, r3
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 f86d 	bl	80036e0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003606:	e051      	b.n	80036ac <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003610:	b29b      	uxth	r3, r3
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800361a:	b29b      	uxth	r3, r3
 800361c:	2b00      	cmp	r3, #0
 800361e:	d047      	beq.n	80036b0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003620:	8a7b      	ldrh	r3, [r7, #18]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d044      	beq.n	80036b0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68da      	ldr	r2, [r3, #12]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003634:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	695a      	ldr	r2, [r3, #20]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0201 	bic.w	r2, r2, #1
 8003644:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2220      	movs	r2, #32
 800364a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68da      	ldr	r2, [r3, #12]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 0210 	bic.w	r2, r2, #16
 8003662:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003664:	8a7b      	ldrh	r3, [r7, #18]
 8003666:	4619      	mov	r1, r3
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 f839 	bl	80036e0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800366e:	e01f      	b.n	80036b0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003676:	2b00      	cmp	r3, #0
 8003678:	d008      	beq.n	800368c <HAL_UART_IRQHandler+0x324>
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 f8f9 	bl	800387c <UART_Transmit_IT>
    return;
 800368a:	e012      	b.n	80036b2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800368c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00d      	beq.n	80036b2 <HAL_UART_IRQHandler+0x34a>
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369c:	2b00      	cmp	r3, #0
 800369e:	d008      	beq.n	80036b2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f93a 	bl	800391a <UART_EndTransmit_IT>
    return;
 80036a6:	e004      	b.n	80036b2 <HAL_UART_IRQHandler+0x34a>
    return;
 80036a8:	bf00      	nop
 80036aa:	e002      	b.n	80036b2 <HAL_UART_IRQHandler+0x34a>
      return;
 80036ac:	bf00      	nop
 80036ae:	e000      	b.n	80036b2 <HAL_UART_IRQHandler+0x34a>
      return;
 80036b0:	bf00      	nop
  }
}
 80036b2:	3728      	adds	r7, #40	; 0x28
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	08003855 	.word	0x08003855

080036bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bc80      	pop	{r7}
 80036cc:	4770      	bx	lr

080036ce <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr

080036e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bc80      	pop	{r7}
 80036f4:	4770      	bx	lr

080036f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b084      	sub	sp, #16
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	60f8      	str	r0, [r7, #12]
 80036fe:	60b9      	str	r1, [r7, #8]
 8003700:	603b      	str	r3, [r7, #0]
 8003702:	4613      	mov	r3, r2
 8003704:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003706:	e02c      	b.n	8003762 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800370e:	d028      	beq.n	8003762 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d007      	beq.n	8003726 <UART_WaitOnFlagUntilTimeout+0x30>
 8003716:	f7fe fa91 	bl	8001c3c <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	429a      	cmp	r2, r3
 8003724:	d21d      	bcs.n	8003762 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68da      	ldr	r2, [r3, #12]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003734:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	695a      	ldr	r2, [r3, #20]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 0201 	bic.w	r2, r2, #1
 8003744:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2220      	movs	r2, #32
 800374a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2220      	movs	r2, #32
 8003752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e00f      	b.n	8003782 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4013      	ands	r3, r2
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	429a      	cmp	r2, r3
 8003770:	bf0c      	ite	eq
 8003772:	2301      	moveq	r3, #1
 8003774:	2300      	movne	r3, #0
 8003776:	b2db      	uxtb	r3, r3
 8003778:	461a      	mov	r2, r3
 800377a:	79fb      	ldrb	r3, [r7, #7]
 800377c:	429a      	cmp	r2, r3
 800377e:	d0c3      	beq.n	8003708 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800378a:	b480      	push	{r7}
 800378c:	b085      	sub	sp, #20
 800378e:	af00      	add	r7, sp, #0
 8003790:	60f8      	str	r0, [r7, #12]
 8003792:	60b9      	str	r1, [r7, #8]
 8003794:	4613      	mov	r3, r2
 8003796:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	88fa      	ldrh	r2, [r7, #6]
 80037a2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	88fa      	ldrh	r2, [r7, #6]
 80037a8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2222      	movs	r2, #34	; 0x22
 80037b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68da      	ldr	r2, [r3, #12]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037ce:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	695a      	ldr	r2, [r3, #20]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0201 	orr.w	r2, r2, #1
 80037de:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68da      	ldr	r2, [r3, #12]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0220 	orr.w	r2, r2, #32
 80037ee:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr

080037fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003812:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	695a      	ldr	r2, [r3, #20]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 0201 	bic.w	r2, r2, #1
 8003822:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003828:	2b01      	cmp	r3, #1
 800382a:	d107      	bne.n	800383c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68da      	ldr	r2, [r3, #12]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0210 	bic.w	r2, r2, #16
 800383a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2220      	movs	r2, #32
 8003840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	631a      	str	r2, [r3, #48]	; 0x30
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	bc80      	pop	{r7}
 8003852:	4770      	bx	lr

08003854 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f7ff ff2d 	bl	80036ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003874:	bf00      	nop
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b21      	cmp	r3, #33	; 0x21
 800388e:	d13e      	bne.n	800390e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003898:	d114      	bne.n	80038c4 <UART_Transmit_IT+0x48>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d110      	bne.n	80038c4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	881b      	ldrh	r3, [r3, #0]
 80038ac:	461a      	mov	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038b6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	1c9a      	adds	r2, r3, #2
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	621a      	str	r2, [r3, #32]
 80038c2:	e008      	b.n	80038d6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	1c59      	adds	r1, r3, #1
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6211      	str	r1, [r2, #32]
 80038ce:	781a      	ldrb	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038da:	b29b      	uxth	r3, r3
 80038dc:	3b01      	subs	r3, #1
 80038de:	b29b      	uxth	r3, r3
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	4619      	mov	r1, r3
 80038e4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10f      	bne.n	800390a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68da      	ldr	r2, [r3, #12]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038f8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68da      	ldr	r2, [r3, #12]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003908:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800390a:	2300      	movs	r3, #0
 800390c:	e000      	b.n	8003910 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800390e:	2302      	movs	r3, #2
  }
}
 8003910:	4618      	mov	r0, r3
 8003912:	3714      	adds	r7, #20
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr

0800391a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b082      	sub	sp, #8
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68da      	ldr	r2, [r3, #12]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003930:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2220      	movs	r2, #32
 8003936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f7ff febe 	bl	80036bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b086      	sub	sp, #24
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b22      	cmp	r3, #34	; 0x22
 800395c:	f040 8099 	bne.w	8003a92 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003968:	d117      	bne.n	800399a <UART_Receive_IT+0x50>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d113      	bne.n	800399a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003972:	2300      	movs	r3, #0
 8003974:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	b29b      	uxth	r3, r3
 8003984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003988:	b29a      	uxth	r2, r3
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003992:	1c9a      	adds	r2, r3, #2
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	629a      	str	r2, [r3, #40]	; 0x28
 8003998:	e026      	b.n	80039e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80039a0:	2300      	movs	r3, #0
 80039a2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ac:	d007      	beq.n	80039be <UART_Receive_IT+0x74>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10a      	bne.n	80039cc <UART_Receive_IT+0x82>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d106      	bne.n	80039cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	701a      	strb	r2, [r3, #0]
 80039ca:	e008      	b.n	80039de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e2:	1c5a      	adds	r2, r3, #1
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	3b01      	subs	r3, #1
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	4619      	mov	r1, r3
 80039f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d148      	bne.n	8003a8e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68da      	ldr	r2, [r3, #12]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0220 	bic.w	r2, r2, #32
 8003a0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68da      	ldr	r2, [r3, #12]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	695a      	ldr	r2, [r3, #20]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 0201 	bic.w	r2, r2, #1
 8003a2a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d123      	bne.n	8003a84 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68da      	ldr	r2, [r3, #12]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 0210 	bic.w	r2, r2, #16
 8003a50:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0310 	and.w	r3, r3, #16
 8003a5c:	2b10      	cmp	r3, #16
 8003a5e:	d10a      	bne.n	8003a76 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a60:	2300      	movs	r3, #0
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7ff fe2f 	bl	80036e0 <HAL_UARTEx_RxEventCallback>
 8003a82:	e002      	b.n	8003a8a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f7fd fd05 	bl	8001494 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	e002      	b.n	8003a94 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	e000      	b.n	8003a94 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003a92:	2302      	movs	r3, #2
  }
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3718      	adds	r7, #24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68da      	ldr	r2, [r3, #12]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	689a      	ldr	r2, [r3, #8]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003ad6:	f023 030c 	bic.w	r3, r3, #12
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6812      	ldr	r2, [r2, #0]
 8003ade:	68b9      	ldr	r1, [r7, #8]
 8003ae0:	430b      	orrs	r3, r1
 8003ae2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	699a      	ldr	r2, [r3, #24]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a2c      	ldr	r2, [pc, #176]	; (8003bb0 <UART_SetConfig+0x114>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d103      	bne.n	8003b0c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b04:	f7ff f83a 	bl	8002b7c <HAL_RCC_GetPCLK2Freq>
 8003b08:	60f8      	str	r0, [r7, #12]
 8003b0a:	e002      	b.n	8003b12 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b0c:	f7ff f822 	bl	8002b54 <HAL_RCC_GetPCLK1Freq>
 8003b10:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	009a      	lsls	r2, r3, #2
 8003b1c:	441a      	add	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b28:	4a22      	ldr	r2, [pc, #136]	; (8003bb4 <UART_SetConfig+0x118>)
 8003b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2e:	095b      	lsrs	r3, r3, #5
 8003b30:	0119      	lsls	r1, r3, #4
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	4613      	mov	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	009a      	lsls	r2, r3, #2
 8003b3c:	441a      	add	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b48:	4b1a      	ldr	r3, [pc, #104]	; (8003bb4 <UART_SetConfig+0x118>)
 8003b4a:	fba3 0302 	umull	r0, r3, r3, r2
 8003b4e:	095b      	lsrs	r3, r3, #5
 8003b50:	2064      	movs	r0, #100	; 0x64
 8003b52:	fb00 f303 	mul.w	r3, r0, r3
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	011b      	lsls	r3, r3, #4
 8003b5a:	3332      	adds	r3, #50	; 0x32
 8003b5c:	4a15      	ldr	r2, [pc, #84]	; (8003bb4 <UART_SetConfig+0x118>)
 8003b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b62:	095b      	lsrs	r3, r3, #5
 8003b64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b68:	4419      	add	r1, r3
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	009a      	lsls	r2, r3, #2
 8003b74:	441a      	add	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b80:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <UART_SetConfig+0x118>)
 8003b82:	fba3 0302 	umull	r0, r3, r3, r2
 8003b86:	095b      	lsrs	r3, r3, #5
 8003b88:	2064      	movs	r0, #100	; 0x64
 8003b8a:	fb00 f303 	mul.w	r3, r0, r3
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	011b      	lsls	r3, r3, #4
 8003b92:	3332      	adds	r3, #50	; 0x32
 8003b94:	4a07      	ldr	r2, [pc, #28]	; (8003bb4 <UART_SetConfig+0x118>)
 8003b96:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9a:	095b      	lsrs	r3, r3, #5
 8003b9c:	f003 020f 	and.w	r2, r3, #15
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	440a      	add	r2, r1
 8003ba6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ba8:	bf00      	nop
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40013800 	.word	0x40013800
 8003bb4:	51eb851f 	.word	0x51eb851f

08003bb8 <__libc_init_array>:
 8003bb8:	b570      	push	{r4, r5, r6, lr}
 8003bba:	2600      	movs	r6, #0
 8003bbc:	4d0c      	ldr	r5, [pc, #48]	; (8003bf0 <__libc_init_array+0x38>)
 8003bbe:	4c0d      	ldr	r4, [pc, #52]	; (8003bf4 <__libc_init_array+0x3c>)
 8003bc0:	1b64      	subs	r4, r4, r5
 8003bc2:	10a4      	asrs	r4, r4, #2
 8003bc4:	42a6      	cmp	r6, r4
 8003bc6:	d109      	bne.n	8003bdc <__libc_init_array+0x24>
 8003bc8:	f000 f822 	bl	8003c10 <_init>
 8003bcc:	2600      	movs	r6, #0
 8003bce:	4d0a      	ldr	r5, [pc, #40]	; (8003bf8 <__libc_init_array+0x40>)
 8003bd0:	4c0a      	ldr	r4, [pc, #40]	; (8003bfc <__libc_init_array+0x44>)
 8003bd2:	1b64      	subs	r4, r4, r5
 8003bd4:	10a4      	asrs	r4, r4, #2
 8003bd6:	42a6      	cmp	r6, r4
 8003bd8:	d105      	bne.n	8003be6 <__libc_init_array+0x2e>
 8003bda:	bd70      	pop	{r4, r5, r6, pc}
 8003bdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003be0:	4798      	blx	r3
 8003be2:	3601      	adds	r6, #1
 8003be4:	e7ee      	b.n	8003bc4 <__libc_init_array+0xc>
 8003be6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bea:	4798      	blx	r3
 8003bec:	3601      	adds	r6, #1
 8003bee:	e7f2      	b.n	8003bd6 <__libc_init_array+0x1e>
 8003bf0:	08003c50 	.word	0x08003c50
 8003bf4:	08003c50 	.word	0x08003c50
 8003bf8:	08003c50 	.word	0x08003c50
 8003bfc:	08003c54 	.word	0x08003c54

08003c00 <memset>:
 8003c00:	4603      	mov	r3, r0
 8003c02:	4402      	add	r2, r0
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d100      	bne.n	8003c0a <memset+0xa>
 8003c08:	4770      	bx	lr
 8003c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c0e:	e7f9      	b.n	8003c04 <memset+0x4>

08003c10 <_init>:
 8003c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c12:	bf00      	nop
 8003c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c16:	bc08      	pop	{r3}
 8003c18:	469e      	mov	lr, r3
 8003c1a:	4770      	bx	lr

08003c1c <_fini>:
 8003c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c1e:	bf00      	nop
 8003c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c22:	bc08      	pop	{r3}
 8003c24:	469e      	mov	lr, r3
 8003c26:	4770      	bx	lr
